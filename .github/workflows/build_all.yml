name: ‚ñ∂Ô∏è Build Binaries for Multiple Platforms and Docker Image

on:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1) Disparador manual desde GitHub Actions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  workflow_dispatch:
    inputs:
      final_release:
        description: "Is this a Final Release?"
        required: true
        default: false
        type: boolean
      compiler:
        description: "Select Compiler:"
        required: true
        default: "nuitka"
        type: choice
        options:
          - nuitka
          - pyinstaller
      compilation_mode:
        description: "Select Compilation Mode:"
        required: true
        default: "onefile"
        type: choice
        options:
          - onefile
          - standalone
#      build_mode:
#        description: "Select Build Mode:"
#        required: true
#        default: "default"
#        type: choice
#        options:
#          - default
#          - custom
      python:
        description: "Select Python Version:"
        required: true
        default: "3.12"
        type: choice
        options:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.14"

      linux_x64:
        description: "Include linux-x64 ?"
        type: boolean
        required: true
        default: true
      macos_x64:
        description: "Include macos-x64 ?"
        type: boolean
        required: true
        default: true
      windows_x64:
        description: "Include windows-x64 ?"
        type: boolean
        required: true
        default: true

      linux_arm64:
        description: "Include linux-arm64 ?"
        type: boolean
        required: true
        default: true
      macos_arm64:
        description: "Include macos-arm64 ?"
        type: boolean
        required: true
        default: true
      windows_arm64:
        description: "Include windows-arm64 ?"
        type: boolean
        required: true
        default: true

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2) Disparador autom√°tico por push ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  #  push:                   # Ejecuci√≥n tras push en main, excepto en los path-ignore
  #    branches:
  #      - main
  #    paths-ignore:
  #      - '_built_versions/**'  # Ignore any changes in _built_versions
  #      - .gitignore
  #      - gpth*/**
  #      - exif*/**
  #      - .idea/**

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3) Disparador autom√°tico por cron ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  #  schedule:
  #    - cron: '0 2 * * *' # Ejecuci√≥n diaria a las 2 AM UTC
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


jobs:
  # ==========================================================================================================================
  # JOB Set Input Matrix
  # ==========================================================================================================================
  set-input-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - id: matrix
        run: |
          echo "‚öôÔ∏è Preparando matriz din√°mica..."

          EVENT_NAME="${{ github.event_name }}"

          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            echo "üîò Disparo manual con inputs"
            linux_x64=${{ toJSON(github.event.inputs.linux_x64) }}
            linux_arm64=${{ toJSON(github.event.inputs.linux_arm64) }}
            macos_x64=${{ toJSON(github.event.inputs.macos_x64) }}
            macos_arm64=${{ toJSON(github.event.inputs.macos_arm64) }}
            windows_x64=${{ toJSON(github.event.inputs.windows_x64) }}
            windows_arm64=${{ toJSON(github.event.inputs.windows_arm64) }}
            compiler="${{ github.event.inputs.compiler }}"
            compilation_mode="${{ github.event.inputs.compilation_mode }}"
            # build_mode="${{ github.event.inputs.build_mode }}"
            build_mode="custom"
            python="${{ github.event.inputs.python }}"

          else
            echo "‚è∞ Disparo programado (cron) o üì¶ Disparo por commit"
            linux_x64="true"
            linux_arm64="true"
            macos_x64="true"
            macos_arm64="true"
            windows_x64="true"
            windows_arm64="true"
            compiler="nuitka"
            compilation_mode="onefile"
            build_mode="default"
            python="3.12"
          fi

          # Crear lista
          OS_LIST=()
          [ "$linux_x64" = "true" ] && OS_LIST+=("linux-x64")
          [ "$linux_arm64" = "true" ] && OS_LIST+=("linux-arm64")
          [ "$macos_x64" = "true" ] && OS_LIST+=("macos-x64")
          [ "$macos_arm64" = "true" ] && OS_LIST+=("macos-arm64")
          [ "$windows_x64" = "true" ] && OS_LIST+=("windows-x64")
          [ "$windows_arm64" = "true" ] && OS_LIST+=("windows-arm64")

          if [ ${#OS_LIST[@]} -eq 0 ]; then
            echo "‚ùå No OS selected"
            exit 1
          fi

          # Convertir a array JSON real y limpio
          OS_JSON=$(printf '%s\n' "${OS_LIST[@]}" | jq -R . | jq -s .)

          # Construir JSON compacto final
          MATRIX=$(jq -nc \
            --argjson os "${OS_JSON}" \
            --arg compiler ${compiler} \
            --arg compilation_mode ${compilation_mode} \
            --arg build_mode ${build_mode} \
            --arg python ${python} \
            '{os: $os, compiler: [$compiler], compilation_mode: [$compilation_mode], build_mode: [$build_mode], python: [$python]}')

          echo "‚úÖ Matriz generada:"
          echo "$MATRIX"
          echo ""
          echo "üìã Desglose de Inputs:"
          echo "  üèÅ Final-Release    : ${{ github.event.inputs.final_release }}"
          echo "  üåø Branch           : ${{ github.ref_name }}"
          echo "  üì¶ OS               : $(echo "$MATRIX" | jq -r '.os | join(", ")')"
          echo "  üõ†Ô∏è Compiler         : $(echo "$MATRIX" | jq -r '.compiler | join(", ")')"
          echo "  üß™ Compilation mode : $(echo "$MATRIX" | jq -r '.compilation_mode | join(", ")')"
          echo "  üöÄ Build mode       : $(echo "$MATRIX" | jq -r '.build_mode | join(", ")')"
          echo "  üêç Python version   : $(echo "$MATRIX" | jq -r '.python | join(", ")')"

          # Exportar en una sola l√≠nea (obligatorio)
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  # ==========================================================================================================================
  # JOB Docker packaging (single run)
  # ==========================================================================================================================
  build-docker:
    name: üê≥ Build Docker
    uses: ./.github/workflows/build_docker.yml
    needs: set-input-matrix
    with:
      final_release: ${{ inputs.final_release }}
    secrets:
      TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}


  # ==========================================================================================================================
  # JOB build
  # ==========================================================================================================================
  build-binaries:
    name: ‚ñ∂Ô∏è Build Binaries
    # Different VM images to compile in all SO and all Archs according to:
    # https://github.com/actions/runner-images
    # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    needs: set-input-matrix
    strategy:
      matrix: ${{ fromJson(needs.set-input-matrix.outputs.matrix) }}
        # os: [ linux-x64, linux-arm64, macos-x64, macos-arm64, windows-x64, windows-arm64 ]
        # compiler: [ "${{ github.event.inputs.compiler }}" ] # possible values: [pyinstaller, nuitka]
        # mode: [ "${{ github.event.inputs.mode }}" ] # possible values: [default, custom]
        # python: [ "${{ github.event.inputs.python }}"] # select Python version

    # runs-on: ${{ matrix.os }}
    # latest linux-x64: ubuntu-latest
    # latest linux-arm64: ubuntu-24.04-arm
    runs-on: ${{ fromJson('{
      "linux-x64":"ubuntu-22.04", 
      "linux-arm64":"ubuntu-22.04-arm",
      "macos-x64":"macos-13",
      "macos-arm64":"macos-latest",
      "windows-x64":"windows-latest",
      "windows-arm64":"windows-11-arm"}')
      [matrix.os] }}

    steps:
      - name: üîç Show environment configuration
        shell: bash
        run: |
          echo ""
          echo "üéØ Event that triggered this workflow: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "‚úÖ Manually triggered by a user from the interface"
          else
            echo "ü§ñ Automatically triggered (by push or cron)"
          fi
          echo ""
          echo "üì¶ Target OS         : ${{ matrix.os }}"
          echo "üõ†Ô∏è Selected compiler : ${{ matrix.compiler }}"
          echo "üß™ Compilation mode  : ${{ matrix.compilation_mode }}"
          echo "üöÄ Build mode        : ${{ matrix.build_mode }}"
          echo "üêç Python version    : ${{ matrix.python }}"
          echo ""
          echo "OS        : ${{ runner.os }}"
          echo "Arch      : ${{ runner.arch }}"
          echo "Python    : ${{ matrix.python }}"
          echo "Compiler  : ${{ matrix.compiler }}"
          echo "Build Mode: ${{ matrix.build_mode }}"

      # Checkout Repository
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN_GITHUB }}

      # Set up Python
      - name: üêç Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      # Install dependencies
      - name: üì¶ Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: ‚ñ∂Ô∏è DEFAULT IMAGES MODE - Build for All Operating System (Linux, MacOS, Windows) and All Architectures (x64, arm64) using default images for each plattform
        if: matrix.build_mode == 'default'
        shell: bash
        run: |
          echo "::group::Build for ${{ runner.os }}-${{ runner.arch }}. Python Version: ${{ matrix.python }}. Compiler: ${{ matrix.compiler }}"
          echo "================================================================================================="
          echo "INFO    : INSTALLED VERSIONS..."
          echo "================================================================================================="
          echo "Python version:"
          python3 --version
          echo "PyInstaller version:"
          pyinstaller --version
          echo "Nuitka version:"
          python3 -m nuitka --version
          echo "================================================================================================="
          echo "INFO    : COMPILING..."
          echo "================================================================================================="
          python3 build-binary.py --${{ matrix.compiler }} --${{ matrix.compilation_mode }}

          echo "::endgroup::"

      - name: ‚ñ∂Ô∏è CUSTOM IMAGES MODE - Build for All Operating System (Linux, MacOS, Windows) and All Architectures (x64, arm64) but customizing image per plattform.
        if: matrix.build_mode == 'custom'
        shell: bash
        run: |
          echo "::group::Build for ${{ runner.os }}-${{ runner.arch }}. Python Version: ${{ matrix.python }}. Compiler: ${{ matrix.compiler }}"
           
          # Build for Linux (x64)
          if [[ "${{ matrix.os }}" == *"linux"* ]] && [ "${{ runner.arch }}" == "X64" ]; then
            docker run --rm --platform linux/amd64 -v ${{ github.workspace }}:/workspace -w /workspace jaimetur/centos-amd64:7 bash -c '
                echo "================================================================================================="
                echo "INFO    : INSTALLING REQUIREMENTS..."
                echo "================================================================================================="
                python3 -m pip install --upgrade pip
                python3 -m pip install -r requirements.txt
                echo "================================================================================================="
                echo "INFO    : INSTALLED VERSIONS..."
                echo "================================================================================================="
                echo "Python version:"
                python3 --version
                echo "PyInstaller version:"
                pyinstaller --version
                echo "Nuitka version:"
                python3 -m nuitka --version
                echo "================================================================================================="
                echo "INFO    : COMPILING..."
                echo "================================================================================================="
                python3 build-binary.py --${{ matrix.compiler }} --${{ matrix.compilation_mode }}
            '
          # Build for Linux (arm64), macOS (x64 & arm64), Windows (x64 & arm64)
          else
            # echo "================================================================================================="
            # echo "INFO    : INSTALLING REQUIREMENTS..."
            # echo "================================================================================================="
            # python3 -m pip install --upgrade pip
            # python3 -m pip install -r requirements.txt
            echo "================================================================================================="
            echo "INFO    : INSTALLED VERSIONS..."
            echo "================================================================================================="
            echo "Python version:"
            python3 --version
            echo "PyInstaller version:"
            pyinstaller --version
            echo "Nuitka version:"
            python3 -m nuitka --version
            echo "================================================================================================="
            echo "INFO    : COMPILING..."
            echo "================================================================================================="
            python3 build-binary.py --${{ matrix.compiler }} --${{ matrix.compilation_mode }}
          fi

          echo "::endgroup::"

      - name: üè∑Ô∏è Extract TOOL_VERSION and ARCHIVE_PATH from build_info.txt
        shell: bash
        run: |
          # Read TOOL_VERSION from the first line
          TOOL_VERSION=$(grep '^TOOL_VERSION=' build_info.txt | cut -d'=' -f2-)

          # Read ARCHIVE_PATH from the second line
          ARCHIVE_PATH=$(grep '^ARCHIVE_PATH=' build_info.txt | cut -d'=' -f2-)
          
          # Save both variables on GitHub Actions environment
          echo "TOOL_VERSION=${TOOL_VERSION}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

          # Print both variables on screen
          echo "TOOL_VERSION   : ${TOOL_VERSION}"
          echo "ARCHIVE_PATH   : ${ARCHIVE_PATH}"

      - name: üìõ Extract ARCHIVE_NAME from ARCHIVE_PATH (onefile mode only)
        if: matrix.compilation_mode == 'onefile'
        shell: bash
        run: |
          ARCHIVE_NAME=$(basename "${ARCHIVE_PATH}")
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_NAME: ${ARCHIVE_NAME}"

      - name: üß∞ Install zip (satandalone mode on Windows only)
        if: ${{ matrix.compilation_mode == 'standalone' && runner.os == 'Windows' }}
        shell: bash
        run: choco install zip -y

      - name: üì¶ Compress dist folder (standalone mode only)
        if: matrix.compilation_mode == 'standalone'
        shell: bash
        run: |
          echo "üîç Compilation mode: ${{ matrix.compilation_mode }}"
          echo "üõ†Ô∏è Compiler: ${{ matrix.compiler }}"
          
          if [[ "${{ matrix.compilation_mode }}" == "standalone" ]]; then
            folder="${{ matrix.compiler }}_dist"
            ZIP_FILE="PhotoMigrator_v${{ env.TOOL_VERSION }}_standalone_${{ matrix.os }}_${{ matrix.compiler }}.zip"
            echo "üìÅ Checking for folder: $folder"
          
            if [ -d "$folder" ]; then
              echo "‚úÖ Folder '$folder' found. Creating ${ZIP_FILE}..."
              zip -r "${ZIP_FILE}" "$folder"
              echo "ZIP_FILE=${ZIP_FILE}" >> $GITHUB_ENV
              echo "ZIP_FILE: ${ZIP_FILE}"
            else
              echo "‚ö†Ô∏è Folder '$folder' not found. Skipping compression."
            fi
          else
            echo "‚ÑπÔ∏è Compilation mode is not 'standalone'. Skipping compression."
          fi

      - name: ‚¨ÜÔ∏è Upload compressed dist folder as artifact (standalone mode only)
        if: ${{ matrix.compilation_mode == 'standalone' && env.ZIP_FILE != '' && env.ZIP_FILE != null }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_FILE }}
          path: ${{ env.ZIP_FILE }}

      - name: ‚¨ÜÔ∏è Upload build binary as artifact (onefile mode only)
        if: matrix.compilation_mode == 'onefile'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_PATH }}

      - name: ‚¨ÜÔ∏è Upload RELEASE-NOTES.md as artifact
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: RELEASE-NOTES.md
          path: RELEASE-NOTES.md
          overwrite: true

      - name: üßπ Cleanup
        shell: bash
        run: |
          if [ -f artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de carpeta raiz."
          elif [ -f src/artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de src."
          fi
          # if [ -f ${{ env.ARCHIVE_PATH }} ]; then
            # rm ${{ env.ARCHIVE_PATH }}
            # echo "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta raiz."
          # elif [ -f src/${{ env.ARCHIVE_PATH }} ]; then
            # rm ${{ env.ARCHIVE_PATH }}
            # echo "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta src."
          # fi


  # ==========================================================================================================================
  # JOB Create Release
  # ==========================================================================================================================
  create-release:
    name: üè∑Ô∏è Create Release
    needs:
      - build-binaries
      - build-docker

    runs-on: ubuntu-22.04

    outputs:
      tool_version: ${{ steps.extract_version.outputs.tool_version }}

    steps:
      - name: üßæ Checkout source code
        uses: actions/checkout@v4

      - name: ‚úÖ Check Final-Release
        run: |
          echo "Final-Release: ${{ inputs.final_release }}"

      - name: üè∑Ô∏è Extract TOOL_VERSION from GlobalVariables.py
        run: |
          # 1Ô∏è‚É£ Obtenemos el valor sin la ‚Äúv‚Äù
          TOOL_VERSION=$(grep -oP '^TOOL_VERSION_WITHOUT_V\s*=\s*"\K[^"]+' ./src/Core/GlobalVariables.py)

          # 3Ô∏è‚É£ Lo exportamos para los siguientes steps
          echo "TOOL_VERSION=${TOOL_VERSION}" >> "$GITHUB_ENV"
          echo "tool_version=${TOOL_VERSION}" >> $GITHUB_OUTPUT
          echo "‚úÖ TOOL_VERSION = ${TOOL_VERSION}"

      - name: üßº Delete GitHub release, tag and associated discussion (only for stable releases)
        run: |
          set -e
          TAG="v${{ env.TOOL_VERSION }}"
          REPO="${{ github.repository }}"
          EXIT_CODE=0
      
          # Get release info safely
          RELEASE_INFO=$(gh api --silent "repos/$REPO/releases/tags/$TAG" 2>/dev/null || echo "")
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // empty')
          
          # Check for existing releasess/discussions with RELEASE_ID associated to TAG
          echo "üîç Checking for existing discussion ID with tag $TAG..."
          if [[ -n "$RELEASE_ID" ]]; then
            echo "üóë Discussion ID $RELEASE_ID exists associated with tag $TAG . Deleting it (discussion will also be removed)..."
            gh api -X DELETE "repos/$REPO/releases/$RELEASE_ID"
            echo "‚úÖ Release ID $RELEASE_ID successfully deleted."
          else
            echo "‚úÖ No discussion was found for tag $TAG"
          fi
          
          # Check if release exists and delete it
          echo "üîç Checking for existing release with tag $TAG..."
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" &> /dev/null; then
            echo "üóë Release $TAG exists. Deleting it..."
            gh release delete "$TAG" --repo "$GITHUB_REPOSITORY" --yes
            echo "‚úÖ Release $TAG successfully deleted."
          else
            echo "‚úÖ Release $TAG does not exist."
          fi
      
          # Check if remote tag exists and delete it
          echo "üîç Checking for remote tag $TAG..."
          if git ls-remote --tags origin | grep "refs/tags/$TAG" &> /dev/null; then
            echo "üóë Remote tag $TAG exists. Deleting it..."
            git push --delete origin "$TAG" || EXIT_CODE=1
            echo "‚úÖ Remote tag $TAG successfully deleted."
          else
            echo "‚úÖ Remote tag $TAG does not exist"
          fi
          
          # Check if local tag exists and delete it
          echo "üîç Checking for local tag $TAG..."
          if git tag | grep -q "$TAG"; then
            echo "üóë Local tag $TAG exists. Deleting it..."
            git tag -d "$TAG"
            echo "‚úÖ Local tag $TAG successfully deleted."
          else
            echo "‚úÖ Local tag $TAG does not exist"
          fi

          # VERIFICATIONS...
          echo ""
          echo "‚úÖ Verifying cleanup..."
      
          # Retry-based verification of release deletion
          if gh api --silent "repos/$REPO/releases/tags/$TAG" 2>/dev/null; then
            echo "‚ö†Ô∏è Release still exists after deletion. Retrying in 5s..."
            sleep 5
            if gh api --silent "repos/$REPO/releases/tags/$TAG" 2>/dev/null; then
              echo "‚ùå Release still exists after retry."
              EXIT_CODE=1
            else
              echo "‚úÖ Release deleted after retry."
            fi
          else
            echo "‚úÖ Release deleted."
          fi
      
          # Final verification of tag deletion
          if git ls-remote --tags origin | grep "refs/tags/$TAG" &> /dev/null; then
            echo "‚ùå Remote tag still exists after deletion."
            EXIT_CODE=1
          else
            echo "‚úÖ Remote tag deleted."
          fi
      
          if [[ "$EXIT_CODE" -ne 0 ]]; then
            echo "‚ùå Cleanup failed. Aborting workflow."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      - name: üì• Download Artifacts (RELEASE-NOTES.md, Binaries and Docker Zips)
        uses: actions/download-artifact@v4
        with:
          pattern: PhotoMigrator*.zip
          path: ./release_files
          merge-multiple: true

      - name: üìù Download RELEASE-NOTES.md
        uses: actions/download-artifact@v4
        with:
          name: RELEASE-NOTES.md
          path: .

      # Confirmar contenido descargado
      - name: üìÇ List downloaded files
        run: |
          ls -lh ./release_files/
          sha256sum ./release_files/*

      # üöÄ Crear release estable (final_release == true)
      - name: üöÄ Create GitHub Release (stable)
        if: ${{ inputs.final_release == true }}
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: v${{ env.TOOL_VERSION }}
          name: v${{ env.TOOL_VERSION }}
          # target_commitish: main
          discussion_category_name: Announcements
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true
          body_path: RELEASE-NOTES.md
          files: |
            ./release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      
      # üöÄ Crear prerelease (final_release == false)
      - name: üöÄ Create GitHub Release (prerelease)
        if: ${{ inputs.final_release == false }}
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: v${{ env.TOOL_VERSION }}
          name: v${{ env.TOOL_VERSION }}
          # target_commitish: main
          # discussion_category_name: Announcements  # Descomenta si tambi√©n quieres discusi√≥n en prerelease
          draft: false
          prerelease: true
          generate_release_notes: true
          body_path: RELEASE-NOTES.md
          files: |
            ./release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}


  # ==========================================================================================================================
  # JOB Notify Release on Discord Channels (#new_releases & #releases-discussion)
  # ==========================================================================================================================
  notify-discord:
    name: üì£ Notify on Discord
    needs: create-release
    runs-on: ubuntu-latest
    env:
      TOOL_VERSION: ${{ needs.create-release.outputs.tool_version }}

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Extract Tool Version
        run: |
          # 1Ô∏è‚É£ Obtenemos el valor sin la ‚Äúv‚Äù
          TOOL_VERSION=$(grep -oP '^TOOL_VERSION_WITHOUT_V\s*=\s*"\K[^"]+' ./src/Core/GlobalVariables.py)

          # 3Ô∏è‚É£ Lo exportamos para los siguientes steps
          echo "TOOL_VERSION=${TOOL_VERSION}" >> "$GITHUB_ENV"
          echo "‚úÖ TOOL_VERSION = ${TOOL_VERSION}"

      - name: üì• Download RELEASE-NOTES.md from artifacts
        uses: actions/download-artifact@v4
        with:
          name: RELEASE-NOTES.md
          path: .

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 1. üîç CHECK: if message already exists in #new_releases
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üîç Check if message already exists in #new_releases
        id: check_text
        run: |
          VERSION="v${{ env.TOOL_VERSION }}"
          FOOTER_TEXT="$VERSION"
          echo "üîé Searching for footer: $FOOTER_TEXT"

          RESPONSE=$(curl -s -H "Authorization: Bot ${{ secrets.DISCORD_BOT_TOKEN }}" \
            "https://discord.com/api/v10/channels/${{ secrets.DISCORD_NEW_RELEASES_CHANNEL_ID }}/messages?limit=50")

          MATCH=$(echo "$RESPONSE" | jq -e --arg footer "$FOOTER_TEXT" '.[] | select(.embeds[0].footer.text == $footer)' || true)

          if [ -n "$MATCH" ]; then
            echo "‚úÖ Message already exists"
            echo "already_sent=true" >> $GITHUB_OUTPUT
          else
            echo "üÜï No matching message found"
            echo "already_sent=false" >> $GITHUB_OUTPUT
          fi
      

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 2. üì£ NOTIFY: in #new_releases (if not already sent)
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üì£ Notify in #new_releases channel
        if: steps.check_text.outputs.already_sent == 'false'
        run: |
          VERSION="v${{ env.TOOL_VERSION }}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"
          curl -X POST \
               -F "payload_json={
                 \"username\": \"GitHub Bot\",
                 \"embeds\": [{
                   \"title\": \"üì£ New Release Published\",
                   \"description\": \"Version **${{ env.TOOL_VERSION }}** is now available!\n[View release]($REPO_URL/releases/tag/$VERSION)\n\nüìÑ Release-Notes attached as Markdown.\",
                   \"color\": 15105570,
                   \"footer\": {\"text\": \"$VERSION\"}
                 }]
               }" \
               -F "file1=@RELEASE-NOTES.md" \
               ${{ secrets.DISCORD_WEBHOOK_URL_NEW_RELEASES }}

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 3. üì° CHECK: if thread already exists in #releases-discussion
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üîç Check if thread already exists in #releases-discussion
        id: check_discussion
        run: |
          VERSION="v${{ env.TOOL_VERSION }}"
          THREAD_NAME="Release $VERSION"
          echo "üîé Searching for thread: $THREAD_NAME"

          RESPONSE=$(curl -s -H "Authorization: Bot ${{ secrets.DISCORD_BOT_TOKEN }}" \
            "https://discord.com/api/v10/channels/${{ secrets.DISCORD_RELEASES_DISCUSSION_CHANNEL_ID }}/threads/archived/public")

          echo "üì¶ Raw API response: $RESPONSE"

          if echo "$RESPONSE" | jq -e --arg thread "$THREAD_NAME" 'select(.threads != null) | .threads[] | select(.name == $thread)' > /dev/null; then
            echo "‚úÖ Thread already exists"
            echo "already_sent=true" >> $GITHUB_OUTPUT
          else
            echo "üÜï Thread does not exist yet"
            echo "already_sent=false" >> $GITHUB_OUTPUT
          fi

      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      # 4. üì£ NOTIFY: in #releases-discussion (if not already sent)
      # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: üì£ Notify in #releases-discussion channel
        if: steps.check_discussion.outputs.already_sent == 'false'
        run: |
          VERSION="v${{ env.TOOL_VERSION }}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"
          curl -X POST \
               -F "payload_json={
                 \"username\": \"GitHub Bot\",
                 \"thread_name\": \"Release $VERSION\",
                 \"embeds\": [{
                   \"title\": \"üì£ New Release Published\",
                   \"description\": \"Version **${{ env.TOOL_VERSION }}** is now available!\n[View release]($REPO_URL/releases/tag/$VERSION)\n\nüìÑ Release-Notes attached as Markdown.\",
                   \"color\": 3447003,
                   \"footer\": {\"text\": \"$VERSION\"}
                 }]
               }" \
               -F "file1=@RELEASE-NOTES.md" \
               ${{ secrets.DISCORD_WEBHOOK_URL_RELEASES_DISCUSSION }}
      
