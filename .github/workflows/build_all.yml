name: Build Binaries for Multiple Platforms and Docker Image

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: "Is this a Pre-release ?"
        required: true
        default: true
        type: choice
        options:
          - true
          - false
      compiler:
        description: "Select Compiler:"
        required: true
        default: "nuitka"
        type: choice
        options:
          - nuitka
          - pyinstaller
      compilation_mode:
        description: "Select Compilation Mode:"
        required: true
        default: "onefile"
        type: choice
        options:
          - onefile
          - standalone
#      build_mode:
#        description: "Select Build Mode:"
#        required: true
#        default: "default"
#        type: choice
#        options:
#          - default
#          - custom
      python:
        description: "Select Python Version:"
        required: true
        default: "3.12"
        type: choice
        options:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.14"

      linux_x64:
        description: "Include linux-x64 ?"
        type: boolean
        required: true
        default: true
      macos_x64:
        description: "Include macos-x64 ?"
        type: boolean
        required: true
        default: true
      windows_x64:
        description: "Include windows-x64 ?"
        type: boolean
        required: true
        default: true

      linux_arm64:
        description: "Include linux-arm64 ?"
        type: boolean
        required: true
        default: true
      macos_arm64:
        description: "Include macos-arm64 ?"
        type: boolean
        required: true
        default: true
      windows_arm64:
        description: "Include windows-arm64 ?"
        type: boolean
        required: true
        default: true
  #push:                   # Ejecuci√≥n tras push en main, excepto en los path-ignore
    #branches:
      #- main
    #paths-ignore:
      #- '_built_versions/**'  # Ignore any changes in _built_versions
      #- .gitignore
      #- gpth*/**
      #- exif*/**
      #- .idea/**
      #- .github/**
#  schedule:
# Ejecuci√≥n diaria a las 2 AM UTC
#    - cron: '0 2 * * *'


jobs:
  set-input-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - id: matrix
        run: |
          echo "‚öôÔ∏è Preparando matriz din√°mica..."

          EVENT_NAME="${{ github.event_name }}"

          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            echo "üîò Disparo manual con inputs"
            linux_x64=${{ toJSON(github.event.inputs.linux_x64) }}
            linux_arm64=${{ toJSON(github.event.inputs.linux_arm64) }}
            macos_x64=${{ toJSON(github.event.inputs.macos_x64) }}
            macos_arm64=${{ toJSON(github.event.inputs.macos_arm64) }}
            windows_x64=${{ toJSON(github.event.inputs.windows_x64) }}
            windows_arm64=${{ toJSON(github.event.inputs.windows_arm64) }}
            compiler="${{ github.event.inputs.compiler }}"
            compilation_mode="${{ github.event.inputs.compilation_mode }}"
            # build_mode="${{ github.event.inputs.build_mode }}"
            build_mode="custom"
            python="${{ github.event.inputs.python }}"

          else
            echo "‚è∞ Disparo programado (cron) o üì¶ Disparo por commit"
            linux_x64="true"
            linux_arm64="true"
            macos_x64="true"
            macos_arm64="true"
            windows_x64="true"
            windows_arm64="true"
            compiler="nuitka"
            compilation_mode="onefile"
            build_mode="default"
            python="3.12"
          fi

          # Crear lista
          OS_LIST=()
          [ "$linux_x64" = "true" ] && OS_LIST+=("linux-x64")
          [ "$linux_arm64" = "true" ] && OS_LIST+=("linux-arm64")
          [ "$macos_x64" = "true" ] && OS_LIST+=("macos-x64")
          [ "$macos_arm64" = "true" ] && OS_LIST+=("macos-arm64")
          [ "$windows_x64" = "true" ] && OS_LIST+=("windows-x64")
          [ "$windows_arm64" = "true" ] && OS_LIST+=("windows-arm64")

          if [ ${#OS_LIST[@]} -eq 0 ]; then
            echo "‚ùå No OS selected"
            exit 1
          fi

          # Convertir a array JSON real y limpio
          OS_JSON=$(printf '%s\n' "${OS_LIST[@]}" | jq -R . | jq -s .)

          # Construir JSON compacto final
          MATRIX=$(jq -nc \
            --argjson os "${OS_JSON}" \
            --arg compiler ${compiler} \
            --arg compilation_mode ${compilation_mode} \
            --arg build_mode ${build_mode} \
            --arg python ${python} \
            '{os: $os, compiler: [$compiler], compilation_mode: [$compilation_mode], build_mode: [$build_mode], python: [$python]}')

          echo "‚úÖ Matriz generada:"
          echo "$MATRIX"
          echo ""
          echo "üìã Desglose de la matriz:"
          echo "  üì¶ OS               : $(echo "$MATRIX" | jq -r '.os | join(", ")')"
          echo "  üõ†Ô∏è Compiler         : $(echo "$MATRIX" | jq -r '.compiler | join(", ")')"
          echo "  üß™ Compilation mode : $(echo "$MATRIX" | jq -r '.compilation_mode | join(", ")')"
          echo "  üöÄ Build mode       : $(echo "$MATRIX" | jq -r '.build_mode | join(", ")')"
          echo "  üêç Python version   : $(echo "$MATRIX" | jq -r '.python | join(", ")')"

          # Exportar en una sola l√≠nea (obligatorio)
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  # ==========================================================================================================================
  # JOB build
  # ==========================================================================================================================
  build:
    # Different VM images to compile in all SO and all Archs according to:
    # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    needs: set-input-matrix
    strategy:
      matrix: ${{ fromJson(needs.set-input-matrix.outputs.matrix) }}
        # os: [ linux-x64, linux-arm64, macos-x64, macos-arm64, windows-x64, windows-arm64 ]
        # compiler: [ "${{ github.event.inputs.compiler }}" ] # possible values: [pyinstaller, nuitka]
        # mode: [ "${{ github.event.inputs.mode }}" ] # possible values: [default, custom]
        # python: [ "${{ github.event.inputs.python }}"] # select Python version

    # runs-on: ${{ matrix.os }}
    # latest linux-x64: ubuntu-latest
    # latest linux-arm64: ubuntu-24.04-arm
    runs-on: ${{ fromJson('{
      "linux-x64":"ubuntu-22.04", 
      "linux-arm64":"ubuntu-22.04-arm",
      "macos-x64":"macos-13",
      "macos-arm64":"macos-latest",
      "windows-x64":"windows-latest",
      "windows-arm64":"windows-11-arm"}')
      [matrix.os] }}

    steps:
      - name: üîç Show environment configuration
        shell: bash
        run: |
          echo ""
          echo "üéØ Event that triggered this workflow: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "‚úÖ Manually triggered by a user from the interface"
          else
            echo "ü§ñ Automatically triggered (by push or cron)"
          fi
          echo ""
          echo "üì¶ Target OS         : ${{ matrix.os }}"
          echo "üõ†Ô∏è Selected compiler : ${{ matrix.compiler }}"
          echo "üß™ Compilation mode  : ${{ matrix.compilation_mode }}"
          echo "üöÄ Build mode        : ${{ matrix.build_mode }}"
          echo "üêç Python version    : ${{ matrix.python }}"
          echo ""
          echo "OS        : ${{ runner.os }}"
          echo "Arch      : ${{ runner.arch }}"
          echo "Python    : ${{ matrix.python }}"
          echo "Compiler  : ${{ matrix.compiler }}"
          echo "Build Mode: ${{ matrix.build_mode }}"

      # Checkout Repository
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN_GITHUB }}

      # Set up Python
      - name: üêç Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      # Install dependencies
      - name: üì¶ Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

#      - name: Install Visual Studio Build Tools (MSVC)
#        if: runner.os == 'Windows'
#        uses: ilammy/msvc-dev-cmd@v1

      - name: üåê DEFAULT IMAGES MODE - Build for All Operating System (Linux, MacOS, Windows) and All Architectures (x64, arm64) using default images for each plattform
        if: matrix.build_mode == 'default'
        shell: bash
        run: |
          echo "::group::Build for ${{ runner.os }}-${{ runner.arch }}. Python Version: ${{ matrix.python }}. Compiler: ${{ matrix.compiler }}"
          echo "================================================================================================="
          echo "INFO    : INSTALLED VERSIONS..."
          echo "================================================================================================="
          echo "Python version:"
          python3 --version
          echo "PyInstaller version:"
          pyinstaller --version
          echo "Nuitka version:"
          python3 -m nuitka --version
          echo "================================================================================================="
          echo "INFO    : COMPILING..."
          echo "================================================================================================="
          python3 build.py --${{ matrix.compiler }} --${{ matrix.compilation_mode }}

          echo "::endgroup::"

      - name: üß© CUSTOM IMAGES MODE - Build for All Operating System (Linux, MacOS, Windows) and All Architectures (x64, arm64) but customizing image per plattform.
        if: matrix.build_mode == 'custom'
        shell: bash
        run: |
          echo "::group::Build for ${{ runner.os }}-${{ runner.arch }}. Python Version: ${{ matrix.python }}. Compiler: ${{ matrix.compiler }}"
           
          # Build for Linux (x64)
          if [[ "${{ matrix.os }}" == *"linux"* ]] && [ "${{ runner.arch }}" == "X64" ]; then
            docker run --rm --platform linux/amd64 -v ${{ github.workspace }}:/workspace -w /workspace jaimetur/centos-amd64:7 bash -c '
                echo "================================================================================================="
                echo "INFO    : INSTALLING REQUIREMENTS..."
                echo "================================================================================================="
                python3 -m pip install --upgrade pip
                python3 -m pip install -r requirements.txt
                echo "================================================================================================="
                echo "INFO    : INSTALLED VERSIONS..."
                echo "================================================================================================="
                echo "Python version:"
                python3 --version
                echo "PyInstaller version:"
                pyinstaller --version
                echo "Nuitka version:"
                python3 -m nuitka --version
                echo "================================================================================================="
                echo "INFO    : COMPILING..."
                echo "================================================================================================="
                python3 build.py --${{ matrix.compiler }} --${{ matrix.compilation_mode }}
            '
          # Build for Linux (arm64), macOS (x64 & arm64), Windows (x64 & arm64)
          else
            # echo "================================================================================================="
            # echo "INFO    : INSTALLING REQUIREMENTS..."
            # echo "================================================================================================="
            # python3 -m pip install --upgrade pip
            # python3 -m pip install -r requirements.txt
            echo "================================================================================================="
            echo "INFO    : INSTALLED VERSIONS..."
            echo "================================================================================================="
            echo "Python version:"
            python3 --version
            echo "PyInstaller version:"
            pyinstaller --version
            echo "Nuitka version:"
            python3 -m nuitka --version
            echo "================================================================================================="
            echo "INFO    : COMPILING..."
            echo "================================================================================================="
            python3 build.py --${{ matrix.compiler }} --${{ matrix.compilation_mode }}
          fi

          echo "::endgroup::"

      - name: üè∑Ô∏è Extract SCRIPT_VERSION and ARCHIVE_PATH from build_info.txt
        shell: bash
        run: |
          # Read SCRIPT_VERSION from the first line
          SCRIPT_VERSION=$(grep '^SCRIPT_VERSION=' build_info.txt | cut -d'=' -f2-)

          # Read ARCHIVE_PATH from the second line
          ARCHIVE_PATH=$(grep '^ARCHIVE_PATH=' build_info.txt | cut -d'=' -f2-)
          
          # Save both variables on GitHub Actions environment
          echo "SCRIPT_VERSION=${SCRIPT_VERSION}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

          # Print both variables on screen
          echo "SCRIPT_VERSION : ${SCRIPT_VERSION}"
          echo "ARCHIVE_PATH   : ${ARCHIVE_PATH}"

      - name: üìõ Extract ARCHIVE_NAME from ARCHIVE_PATH (onefile mode only)
        if: matrix.compilation_mode == 'onefile'
        shell: bash
        run: |
          ARCHIVE_NAME=$(basename "${ARCHIVE_PATH}")
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_NAME: ${ARCHIVE_NAME}"

      - name: üß∞ Install zip (satandalone mode on Windows only)
        if: ${{ matrix.compilation_mode == 'standalone' && runner.os == 'Windows' }}
        shell: bash
        run: choco install zip -y

      - name: üì¶ Compress dist folder (standalone mode only)
        if: matrix.compilation_mode == 'standalone'
        shell: bash
        run: |
          echo "üîç Compilation mode: ${{ matrix.compilation_mode }}"
          echo "üõ†Ô∏è Compiler: ${{ matrix.compiler }}"
          
          if [[ "${{ matrix.compilation_mode }}" == "standalone" ]]; then
            folder="${{ matrix.compiler }}_dist"
            ZIP_FILE="PhotoMigrator_v${{ env.SCRIPT_VERSION }}_standalone_${{ matrix.os }}_${{ matrix.compiler }}.zip"
            echo "üìÅ Checking for folder: $folder"
          
            if [ -d "$folder" ]; then
              echo "‚úÖ Folder '$folder' found. Creating ${ZIP_FILE}..."
              zip -r "${ZIP_FILE}" "$folder"
              echo "ZIP_FILE=${ZIP_FILE}" >> $GITHUB_ENV
              echo "ZIP_FILE: ${ZIP_FILE}"
            else
              echo "‚ö†Ô∏è Folder '$folder' not found. Skipping compression."
            fi
          else
            echo "‚ÑπÔ∏è Compilation mode is not 'standalone'. Skipping compression."
          fi

      - name: ‚¨ÜÔ∏è Upload compressed dist folder as artifact (standalone mode only)
        if: ${{ matrix.compilation_mode == 'standalone' && env.ZIP_FILE != '' && env.ZIP_FILE != null }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_FILE }}
          path: ${{ env.ZIP_FILE }}

      - name: ‚¨ÜÔ∏è Upload build binary as artifact (onefile mode only)
        if: matrix.compilation_mode == 'onefile'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_PATH }}

      - name: ‚¨ÜÔ∏è Upload CURRENT-RELEASE.md as artifact
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: CURRENT-RELEASE.md
          path: CURRENT-RELEASE.md
          overwrite: true

      - name: üßπ Cleanup
        shell: bash
        run: |
          if [ -f artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de carpeta raiz."
          elif [ -f src/artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de src."
          fi
          # if [ -f ${{ env.ARCHIVE_PATH }} ]; then
            # rm ${{ env.ARCHIVE_PATH }}
            # echo "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta raiz."
          # elif [ -f src/${{ env.ARCHIVE_PATH }} ]; then
            # rm ${{ env.ARCHIVE_PATH }}
            # echo "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta src."
          # fi


  # ==========================================================================================================================
  # JOB Docker packaging (single run)
  # ==========================================================================================================================
  docker-packaging:
    name: üê≥ Docker packaging (single run)
    needs: set-input-matrix
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    steps:
      - name: üßæ Checkout source code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Extract SCRIPT_VERSION from GlobalVariables.py
        run: |
          VERSION_LINE=$(grep '^SCRIPT_VERSION' ./src/GlobalVariables.py)
          RAW_VERSION=$(echo "$VERSION_LINE" | cut -d'"' -f2)
          SCRIPT_VERSION=${RAW_VERSION#v}
          echo "SCRIPT_VERSION=${SCRIPT_VERSION}" >> $GITHUB_ENV
          echo "‚úÖ SCRIPT_VERSION = ${SCRIPT_VERSION}"

      - name: üê≥ Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: üê≥ Build & Push Docker image
        run: |
          docker build --pull --no-cache \
            -t jaimetur/photomigrator:${SCRIPT_VERSION} \
            -f docker/Dockerfile .

          docker tag jaimetur/photomigrator:${SCRIPT_VERSION} jaimetur/photomigrator:latest

          if [[ "$SCRIPT_VERSION" != *alpha* && "$SCRIPT_VERSION" != *beta* && "$SCRIPT_VERSION" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${SCRIPT_VERSION} jaimetur/photomigrator:latest-stable
            docker push jaimetur/photomigrator:latest-stable
          fi

          docker push jaimetur/photomigrator:${SCRIPT_VERSION}
          docker push jaimetur/photomigrator:latest

      - name: üß© Prepare ZIP docker package
        run: |
          mkdir -p PhotoMigrator/docker
          cp docker/PhotoMigrator.sh PhotoMigrator/docker/
          cp docker/PhotoMigrator.bat PhotoMigrator/docker/
          cp docker/docker.conf PhotoMigrator/docker/
          cp Config.ini PhotoMigrator/docker/
          cp -r docs PhotoMigrator/docker/
          cp -r help PhotoMigrator/docker/
          cp README.md PhotoMigrator/docker/docs/README.md
          zip -r PhotoMigrator_v${SCRIPT_VERSION}_docker.zip PhotoMigrator
          echo "PhotoMigrator_v${SCRIPT_VERSION}_docker.zip"

      - name: üì§ Upload Docker ZIP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip
          path: PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip

  # ==========================================================================================================================
  # JOB Create Release & Update README.md (single run)
  # ==========================================================================================================================
  create-release:
    name: üè∑Ô∏è Create Release & Update README.md (single run)
    needs:
      - build
      - docker-packaging
    runs-on: ubuntu-22.04

    steps:
      - name: üßæ Checkout source code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Extract SCRIPT_VERSION from GlobalVariables.py
        run: |
          VERSION_LINE=$(grep '^SCRIPT_VERSION' ./src/GlobalVariables.py)
          RAW_VERSION=$(echo "$VERSION_LINE" | cut -d'"' -f2)
          SCRIPT_VERSION=${RAW_VERSION#v}
          echo "SCRIPT_VERSION=${SCRIPT_VERSION}" >> $GITHUB_ENV
          echo "‚úÖ SCRIPT_VERSION = ${SCRIPT_VERSION}"

      - name: üì• Download Artifacts (CURRENT-RELEASE.md, Binaries and Docker Zips)
        uses: actions/download-artifact@v4
        with:
          pattern: PhotoMigrator*.zip
          path: ./release_files
          merge-multiple: true

      - name: üìù Download CURRENT-RELEASE.md
        uses: actions/download-artifact@v4
        with:
          name: CURRENT-RELEASE.md
          path: .

      # Confirmar contenido descargado
      - name: üìÇ List downloaded files
        run: ls -la ./release_files

      # Delete Current Release (if exists) when inputs.prerelease=false
      - name: üßπ Delete existing release and tag (if not prerelease)
        if: ${{ github.event.inputs.prerelease == 'false' }}
        run: |
          TAG="v${{ env.SCRIPT_VERSION }}"

          echo "Deleting GitHub release with tag $TAG if it exists..."

          # Check if release exists and delete it
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" &> /dev/null; then
            echo "Release $TAG exists. Deleting it..."
            gh release delete "$TAG" --repo "$GITHUB_REPOSITORY" --yes
          else
            echo "Release $TAG does not exist."
          fi

          # Check if tag exists and delete it
          if git ls-remote --tags origin | grep "refs/tags/$TAG" &> /dev/null; then
            echo "Tag $TAG exists. Deleting it..."
            git push --delete origin "$TAG"
          else
            echo "Tag $TAG does not exist."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      # Create GitHub Release and upload artifacts
      - name: üöÄ Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.SCRIPT_VERSION }}
          name: v${{ env.SCRIPT_VERSION }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          body_path: CURRENT-RELEASE.md
          files: |
            release_files/*
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      # Commit y push README.md (Solo si OS = Ubuntu* y arch = x64)
      - name: ‚úÖ Commit & push README.md if changed
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # A√±adir solo README.md, evitando archivos no deseados
          git add README.md

          # Si NO hay cambios en README.md, salir sin error
          if git diff --cached --quiet; then
            echo "No hay cambios en README.md"
            exit 0
          fi

          # Guardar cambios en stash antes de pull --rebase
          git stash push -m "Pre-rebase stash"

          # Actualizar la rama
          git pull --rebase origin ${{ github.ref_name }}

          # Restaurar cambios del stash si existen
          git stash pop || echo "No hay stash para aplicar"

          # Asegurar que README.md est√° agregado despu√©s del pop
          git add README.md

          # Verificar nuevamente si hay cambios antes de hacer commit
          if git diff --cached --quiet; then
            echo "No hay cambios despu√©s del stash pop"
            exit 0
          fi

          # Realizar commit y push
          git commit -m "README.md updated by Github Actions (build_all.yml)"
          git push origin ${{ github.ref_name }}

