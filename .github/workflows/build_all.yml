name: Build Docker Image and Binaries for Multiple Platforms

on:
  workflow_dispatch:      # Allows manual execution of the workflow
  #push:                   # Ejecución tras push en main, excepto en los path-ignore
    #branches:
      #- main
    #paths-ignore:
      #- '_built_versions/**'  # Ignore any changes in _built_versions
      #- .gitignore
      #- gpth*/**
      #- exif*/**
      #- .idea/**
      #- _src_versions/**
      #- _buildt_versions/**
      #- .github/**
#  schedule:
# Ejecución diaria a las 2 AM UTC
#    - cron: '0 2 * * *'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]  # os list
        arch: [x86_64, arm64]  # arch list
        exclude:
          - os: windows-latest
            arch: arm64  # Windows is only compiled for x86 (32/64-bit)
        python-version: ["3.12.10"]

    runs-on: ${{ matrix.os }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN_GITHUB }}

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt

      - name: Install Visual Studio Build Tools (MSVC)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # 1. - Build for All Operating System (Linux, MacOS, Windows) and All Architectures (amd64, arm64)
      - name: 1. - Build for All Operating System (Linux, MacOS, Windows) and All Architectures (amd64, arm64)
        run: |
          echo "::group::Build for ${{ matrix.os }} - ${{ matrix.arch }}"
                    
          # Build for macOS (any architecture)
          if [[ "${{ matrix.os }}" == *"macos"* ]]; then
            arch -${{ matrix.arch }} python3 ./src/_build.py pyinstaller
          
          # Build for Windows (amd64)
          elif [[ "${{ matrix.os }}" == *"windows"* ]]; then
            python -m pip install nuitka
            python -m nuitka --version
            python ./src/_build.py nuitka
               
          # Build for Linux (arm64)
          elif [[ "${{ matrix.os }}" == *"ubuntu"* ]] && [ "${{ matrix.arch }}" == "arm64" ]; then
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository universe
            sudo add-apt-repository multiverse
            sudo add-apt-repository restricted
            sudo apt-get update
            sudo apt-get install -y qemu-user-static binfmt-support
            docker run --rm --platform linux/arm64 -v ${{ github.workspace }}:/workspace -w /workspace ubuntu:20.04 bash -c "
                apt update && \
                apt install -y gcc-aarch64-linux-gnu python3 python3-pip patchelf && \
                python3 ./src/_build.py pyinstaller
                "
          
          # Build for Linux (amd64)
          elif [[ "${{ matrix.os }}" == *"ubuntu"* ]] && [ "${{ matrix.arch }}" != "arm64" ]; then
            docker run --rm --platform linux/amd64 -v ${{ github.workspace }}:/workspace -w /workspace jaimetur/centos-amd64:7 bash -c "
                python3 ./src/_build.py pyinstaller
                "
          fi

          echo "::endgroup::"
        shell: bash

      # 2a. Read SCRIPT_VERSION and ARCHIVE_PATH from script_info.txt (Linux/macOS)
      - name: 2a. Read SCRIPT_VERSION and ARCHIVE_PATH from script_info.txt (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # Read SCRIPT_VERSION from the first line
          SCRIPT_VERSION=$(grep '^SCRIPT_VERSION=' script_info.txt | cut -d'=' -f2-)

          # Read ARCHIVE_PATH from the second line
          ARCHIVE_PATH=$(grep '^ARCHIVE_PATH=' script_info.txt | cut -d'=' -f2-)
          
          # Save both variables on GitHub Actions environment
          echo "SCRIPT_VERSION=${SCRIPT_VERSION}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

          # Print both variables on screen
          echo "SCRIPT_VERSION (Linux/macOS): ${SCRIPT_VERSION}"
          echo "ARCHIVE_PATH (Linux/macOS)  : ${ARCHIVE_PATH}"

      # 2b. Read SCRIPT_VERSION and ARCHIVE_PATH from script_info.txt (Windows)
      - name: 2b. Read SCRIPT_VERSION and ARCHIVE_PATH from script_info.txt (Windows)
        if: runner.os == 'Windows'
        run: |
          # Cargar todas las líneas del archivo como un diccionario clave=valor
          $info = @{}
          Get-Content script_info.txt | ForEach-Object {
              if ($_ -match '^([^=]+)=(.*)$') {
                  $info[$matches[1]] = $matches[2]
              }
          }
          
          # Acceder a los valores
          $SCRIPT_VERSION = $info['SCRIPT_VERSION']
          $ARCHIVE_PATH = $info['ARCHIVE_PATH'] -replace '\\', '/'

          # Save both variables on GitHub Actions environment
          echo "SCRIPT_VERSION=$SCRIPT_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ARCHIVE_PATH=$ARCHIVE_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Print both variables on screen
          Write-Output "SCRIPT_VERSION (Windows): $SCRIPT_VERSION"
          Write-Output "ARCHIVE_PATH (Windows)  : $ARCHIVE_PATH"


      # ===========================
      # Generate the Docker version
      # ===========================
      # 3. Log in to Docker Hub
      - name: 3. Log in to Docker Hub
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.arch == 'x86_64' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      # 4. Build & Push Docker image
      - name: 4. Build & Push Docker image
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.arch == 'x86_64' }}
        run: |
          # Fuerza a Docker a:
          #  1) descargar la base actualizada ( --pull )
          #  2) ignorar todas las capas cacheadas ( --no-cache )
          docker build --pull --no-cache \
            -t jaimetur/photomigrator:${{ env.SCRIPT_VERSION }} \
            -f docker/Dockerfile .

          # Etiquetar como latest
          docker tag jaimetur/photomigrator:${{ env.SCRIPT_VERSION }} jaimetur/photomigrator:latest

          # Si es versión estable (no alpha, beta ni RC), etiquetar también como latest-stable
          if [[ "${SCRIPT_VERSION}" != *alpha* && "${SCRIPT_VERSION}" != *beta* && "${SCRIPT_VERSION}" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${SCRIPT_VERSION} jaimetur/photomigrator:latest-stable
            docker push jaimetur/photomigrator:latest-stable
          fi

          # Subir etiquetas latest y con versión específica
          docker push jaimetur/photomigrator:${SCRIPT_VERSION}
          docker push jaimetur/photomigrator:latest

      # 5. Prepare unified ZIP docker package
      - name: 5. Prepare unified ZIP docker package
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.arch == 'x86_64' }}
        run: |
          mkdir -p PhotoMigrator/docker
          cp docker/PhotoMigrator.sh PhotoMigrator/docker/
          cp docker/PhotoMigrator.bat PhotoMigrator/docker/
          cp docker/docker.conf PhotoMigrator/docker/
          cp Config.ini PhotoMigrator/docker/
          cp -r docs PhotoMigrator/docker/
          cp -r help PhotoMigrator/docker/
          cp README.md PhotoMigrator/docker/docs/README.md
          zip -r PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip PhotoMigrator
      # ================================
      # End of Docker version Generation
      # ================================

      # 6. Create Release and Upload Artifact to it
      - name: 6. Create Release and Upload Artifacts to it
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.SCRIPT_VERSION }}
          name: v${{ env.SCRIPT_VERSION }}
          draft: false
          prerelease: true
          generate_release_notes: true
          body_path: CURRENT-RELEASE.md
          files: |
            PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip
            ${{ env.ARCHIVE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      # 7. Commit y push README.md (Solo si OS = Ubuntu* y arch = x86_64)
      - name: 7. Commit y push README.md
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.arch == 'x86_64' }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Añadir solo README.md, evitando archivos no deseados
          git add README.md

          # Si NO hay cambios en README.md, salir sin error
          if git diff --cached --quiet; then
            echo "No hay cambios en README.md"
            exit 0
          fi

          # Guardar cambios en stash antes de pull --rebase
          git stash push -m "Pre-rebase stash"

          # Actualizar la rama
          git pull --rebase origin ${{ github.ref_name }}

          # Restaurar cambios del stash si existen
          git stash pop || echo "No hay stash para aplicar"

          # Asegurar que README.md está agregado después del pop
          git add README.md

          # Verificar nuevamente si hay cambios antes de hacer commit
          if git diff --cached --quiet; then
            echo "No hay cambios después del stash pop"
            exit 0
          fi

          # Realizar commit y push
          git commit -m "Update README.md after compilation"
          git push origin ${{ github.ref_name }}
        
      # 8a. - Cleanup (Linux/macOS)
      - name: 8a. - Cleanup (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -f artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de carpeta raiz."
          elif [ -f src/artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de src."
          fi
          # if [ -f ${{ env.ARCHIVE_PATH }} ]; then
            # rm ${{ env.ARCHIVE_PATH }}
            # echo "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta raiz."
          # elif [ -f src/${{ env.ARCHIVE_PATH }} ]; then
            # rm ${{ env.ARCHIVE_PATH }}
            # echo "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta src."
          # fi
        shell: bash

      # 8b. - Cleanup (Windows)
      - name: 8b. - Cleanup (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "artifact_base64.txt") {
            Remove-Item -Path "artifact_base64.txt"
            Write-Host "Archivo artifact_base64.txt eliminado de carpeta raiz."
          } 
          elseif (Test-Path "src\artifact_base64.txt") {
            Remove-Item -Path "src\artifact_base64.txt"
            Write-Host "Archivo artifact_base64.txt eliminado de carpeta src\."
          }
          if (Test-Path "${{ env.ARCHIVE_PATH }}") {
            Remove-Item -Path "${{ env.ARCHIVE_PATH }}"
            Write-Host "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta raiz."
          } 
          elseif (Test-Path "src\${{ env.ARCHIVE_PATH }}") {
            Remove-Item -Path "src\${{ env.ARCHIVE_PATH }}"
            Write-Host "Archivo '${{ env.ARCHIVE_PATH }}' eliminado de carpeta src\."
          }
        shell: pwsh
