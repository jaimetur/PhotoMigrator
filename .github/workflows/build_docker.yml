name: Build Docker Image Only

on:
  workflow_dispatch:      # Allows manual execution of the workflow
  #push:                   # Ejecución tras push en main, excepto en los path-ignore
    #branches:
      #- main
    #paths-ignore:
      #- '_built_versions/**'  # Ignore any changes in _built_versions
      #- .gitignore
      #- gpth*/**
      #- exif*/**
      #- .idea/**
      #- _src_versions/**
      #- _buildt_versions/**
      #- .github/**
#  schedule:
# Ejecución diaria a las 2 AM UTC
#    - cron: '0 2 * * *'

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest]  # os list
        arch: [x64]  # arch list
        exclude:
          - os: windows-latest
            arch: arm64  # Windows is only compiled for x86 (32/64-bit)
        python-version: ["3.10"]

    runs-on: ${{ matrix.os }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN_GITHUB }}

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # 1. - Execute for MacOS and amd64 Architecture
      - name: 1. - Execute for MacOS and amd64 Architecture
        run: |
          echo "::group::Execute for ${{ matrix.os }} - ${{ matrix.arch }}"
                    
          # Execute for macOS (any architecture)
          if [[ "${{ matrix.os }}" == *"macos"* ]]; then
            cd src
            arch -${{ matrix.arch }} python3 _compile.py skip_compile
          fi
          
          echo "::endgroup::"
        shell: bash

      # 2. Read SCRIPT_VERSION and ARCHIVE_PATH from script_info.txt (Linux/macOS)
      - name: 2. Read SCRIPT_VERSION and ARCHIVE_PATH from script_info.txt (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # Read SCRIPT_VERSION from the first line
          SCRIPT_VERSION=$(sed -n '1p' script_info.txt)

          # Read ARCHIVE_PATH from the second line
          ARCHIVE_PATH=$(sed -n '2p' script_info.txt)

          # Save both variables on GitHub Actions environment
          echo "SCRIPT_VERSION=${SCRIPT_VERSION}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

          # Print both variables on screen
          echo "SCRIPT_VERSION (Linux/macOS): ${SCRIPT_VERSION}"
          echo "ARCHIVE_PATH (Linux/macOS)  : ${ARCHIVE_PATH}"


      # 3. Create Release and Upload Artifact to it
      - name: 3. Create Release and Upload Artifact to it
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.SCRIPT_VERSION }}
          draft: true
          generate_release_notes: true
          body_path: CURRENT-RELEASE.md
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      # ===========================
      # Generate the Docker version
      # ===========================
      # 4. Log in to Docker Hub
      - name: 4. Log in to Docker Hub
        if: ${{ startsWith(matrix.os, 'macos') && matrix.arch == 'x86_64' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Build & Push Docker image
      - name: 5. Build & Push Docker image
        if: ${{ startsWith(matrix.os, 'macos') && matrix.arch == 'x86_64' }}
        run: |
          # Fuerza a Docker a:
          #  1) descargar la base actualizada ( --pull )
          #  2) ignorar todas las capas cacheadas ( --no-cache )
          docker build --pull --no-cache \
            -t jaimetur/cloudphotomigrator:${{ env.SCRIPT_VERSION }} \
            -f docker/Dockerfile .

          # Etiquetar como latest
          docker tag jaimetur/cloudphotomigrator:${{ env.SCRIPT_VERSION }} jaimetur/cloudphotomigrator:latest

          # Si es versión estable (no alpha, beta ni RC), etiquetar también como latest-stable
          if [[ "${SCRIPT_VERSION}" != *alpha* && "${SCRIPT_VERSION}" != *beta* && "${SCRIPT_VERSION}" != *RC* ]]; then
            docker tag jaimetur/cloudphotomigrator:${SCRIPT_VERSION} jaimetur/cloudphotomigrator:latest-stable
            docker push jaimetur/cloudphotomigrator:latest-stable
          fi

          # Subir etiquetas latest y con versión específica
          docker push jaimetur/cloudphotomigrator:${SCRIPT_VERSION}
          docker push jaimetur/cloudphotomigrator:latest
      
      # 6. Prepare unified ZIP docker package
      - name: 6. Prepare unified ZIP docker package
        if: ${{ startsWith(matrix.os, 'macos') && matrix.arch == 'x86_64' }}
        run: |
          mkdir -p CloudPhotoMigrator/docker
          cp docker/CloudPhotoMigrator.sh CloudPhotoMigrator/docker/
          cp docker/CloudPhotoMigrator.bat CloudPhotoMigrator/docker/
          cp docker/docker.conf CloudPhotoMigrator/docker/
          cp Config.ini CloudPhotoMigrator/docker/
          cp -r docs CloudPhotoMigrator/docker/
          cp -r help CloudPhotoMigrator/docker/
          cp README.md CloudPhotoMigrator/docker/docs/README.md
          zip -r CloudPhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip CloudPhotoMigrator

      # 7. Upload release asset
      - name: 7. Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.SCRIPT_VERSION }}
          draft: true
          generate_release_notes: true
          body_path: CURRENT-RELEASE.md
          files: |
            CloudPhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}


      # 8. - Cleanup (Linux/macOS)
      - name: 8. - Cleanup (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -f artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de carpeta raiz."
          elif [ -f src/artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de src."
          fi
        shell: bash


      # 9. Commit y push README.md (Solo si OS = MacOS* y arch = x86_64)
      - name: 9. Commit y push README.md
        if: ${{ startsWith(matrix.os, 'macos') && matrix.arch == 'x86_64' }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Añadir solo README.md, evitando archivos no deseados
          git add README.md

          # Si NO hay cambios en README.md, salir sin error
          if git diff --cached --quiet; then
            echo "No hay cambios en README.md"
            exit 0
          fi

          # Guardar cambios en stash antes de pull --rebase
          git stash push -m "Pre-rebase stash"

          # Actualizar la rama
          git pull --rebase origin ${{ github.ref_name }}

          # Restaurar cambios del stash si existen
          git stash pop || echo "No hay stash para aplicar"

          # Asegurar que README.md está agregado después del pop
          git add README.md

          # Verificar nuevamente si hay cambios antes de hacer commit
          if git diff --cached --quiet; then
            echo "No hay cambios después del stash pop"
            exit 0
          fi

          # Realizar commit y push
          git commit -m "Actualizar README.md tras compilación"
          git push origin ${{ github.ref_name }}


