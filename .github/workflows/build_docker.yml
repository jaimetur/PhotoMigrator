name: Build Docker Image Only

on:
  workflow_dispatch:      # Allows manual execution of the workflow
    inputs:
      create_release:
        description: "Create Release ?"
        type: boolean
        required: true
        default: false
  push:                   # Ejecuci√≥n tras push en cualquier rama, excepto en los path-ignore
    branches:
      - main             # Ejecuci√≥n tras push en main, excepto en los path-ignore
    paths-ignore:
      - .gitignore
      - .idea/**
#      - .github/**
      - gpth*/**
      - README.md
#  schedule:
# Ejecuci√≥n diaria a las 2 AM UTC
#    - cron: '0 2 * * *'
  workflow_call:          # Allow to call this workflow from another workflow
    secrets:
      TOKEN_GITHUB:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-latest, windows-latest]  # os list
        os: [ubuntu-latest]  # os list
        python-version: [ "3.12.10" ]

    runs-on: ${{ matrix.os }}

    steps:
      # üßæ Checkout Repository
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ inputs.token_github || secrets.TOKEN_GITHUB }}

      # üêç Set up Python
      - name: üêç Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # üì¶ Install dependencies
      - name: üì¶ Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          

      # ‚ñ∂Ô∏è Execute build.py with --no-compile to avoid compile any binary
      - name: ‚ñ∂Ô∏è Execute build.py with --no-compile to avoid compile any binary
        shell: bash
        run: |
          echo "::group::Execute for ${{ matrix.os }}"
          python3 build.py --no-compile
          echo "::endgroup::"
          

      # üè∑Ô∏è Extract SCRIPT_VERSION and ARCHIVE_PATH from build_info.txt
      - name: üè∑Ô∏è Extract SCRIPT_VERSION and ARCHIVE_PATH from build_info.txt
#        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Read SCRIPT_VERSION from the first line
          SCRIPT_VERSION=$(grep '^SCRIPT_VERSION=' build_info.txt | cut -d'=' -f2-)

          # Read ARCHIVE_PATH from the second line
          ARCHIVE_PATH=$(grep '^ARCHIVE_PATH=' build_info.txt | cut -d'=' -f2-)

          # Save both variables on GitHub Actions environment
          echo "SCRIPT_VERSION=${SCRIPT_VERSION}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

          # Print both variables on screen
          echo "SCRIPT_VERSION (Linux/macOS): ${SCRIPT_VERSION}"
          echo "ARCHIVE_PATH (Linux/macOS)  : ${ARCHIVE_PATH}"


      # ===========================
      # Generate the Docker version
      # ===========================
      # üê≥ Log in to Docker Hub
      - name: üê≥ Log in to Docker Hub
#        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # üê≥ Build & Push Docker image
      - name: üê≥ Build & Push Docker image
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          # Fuerza a Docker a:
          #  1) descargar la base actualizada ( --pull )
          #  2) ignorar todas las capas cacheadas ( --no-cache )
          docker build --pull --no-cache \
            -t jaimetur/photomigrator:${SCRIPT_VERSION} \
            -t jaimetur/photomigrator:latest \
            -f docker/dockerfile-linux .

          # Subir etiquetas latest y con versi√≥n espec√≠fica
          docker push jaimetur/photomigrator:${SCRIPT_VERSION}
          docker push jaimetur/photomigrator:latest

          # Si es versi√≥n estable (no alpha, beta ni RC), etiquetar tambi√©n como latest-stable
          if [[ "${SCRIPT_VERSION}" != *alpha* && "${SCRIPT_VERSION}" != *beta* && "${SCRIPT_VERSION}" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${SCRIPT_VERSION} jaimetur/photomigrator:latest-stable
            docker push jaimetur/photomigrator:latest-stable
          fi

      # üê≥ Build & Push Windows Docker image (disabled since this doesn't work as expected)
      - name: üê≥ Build & Push Windows Docker image
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: bash
        run: |
          # Construir imagen Windows
          docker build --pull --no-cache \
            -t jaimetur/photomigrator:${SCRIPT_VERSION}-windows \
            -t jaimetur/photomigrator:latest-windows \
            -f docker/dockerfile-windows .

          # Subir etiquetas latest y con versi√≥n espec√≠fica
          docker push jaimetur/photomigrator:${SCRIPT_VERSION}-windows
          docker push jaimetur/photomigrator:latest-windows

          # Si es versi√≥n estable (no alpha, beta ni RC), subir tambi√©n como latest-stable-windows
          if [[ "${SCRIPT_VERSION}" != *alpha* && "${SCRIPT_VERSION}" != *beta* && "${SCRIPT_VERSION}" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${SCRIPT_VERSION}-windows jaimetur/photomigrator:latest-stable-windows
            docker push jaimetur/photomigrator:latest-stable-windows
          fi

      
      # üß© Prepare ZIP docker package
      - name: üß© Prepare ZIP docker package
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          mkdir -p PhotoMigrator/docker
          cp docker/PhotoMigrator.sh PhotoMigrator/docker/
          cp docker/PhotoMigrator.bat PhotoMigrator/docker/
          cp docker/docker.conf PhotoMigrator/docker/
          cp Config.ini PhotoMigrator/docker/
          cp -r docs PhotoMigrator/docker/
          cp -r help PhotoMigrator/docker/
          cp README.md PhotoMigrator/docker/docs/README.md
          zip -r PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip PhotoMigrator

      # üì§ Upload Docker ZIP as artifact to be used in the main workflow
      - name: üì§ Upload Docker ZIP as artifact to be used in the main workflow
        uses: actions/upload-artifact@v4
        with:
          name: PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip
          path: PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip

      # ================================
      # End of Docker version Generation
      # ================================

      # üè∑Ô∏è Create Release and Upload Artifact to it (only if this action have been launched manually with create_release=true)
      - name: üè∑Ô∏è Create Release and Upload Artifact to it (only if this action have been launched manually with create_release=true)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.SCRIPT_VERSION }}
          name: v${{ env.SCRIPT_VERSION }}
          draft: false
          generate_release_notes: true
          body_path: CURRENT-RELEASE.md
          files: |
            PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}