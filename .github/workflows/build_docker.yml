name: üê≥ Build and Push Docker Image

on:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1) Disparador manual desde GitHub Actions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  workflow_dispatch:      # Allows manual execution of the workflow
    inputs:
      create_release:
        description: "Create Release ?"
        type: boolean
        required: false
        default: false
      final_release:
        description: "Is this a Final Release?"
        required: false
        default: false
        type: boolean

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2) Disparador  desde otro workflow ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  workflow_call:          # Allow to call this workflow from another workflow
    inputs:
      final_release:
        description: "Is this a Final Release?"
        required: false
        default: false
        type: boolean
    secrets:
      TOKEN_GITHUB:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3) Disparador autom√°tico por push ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  push:                   # Ejecuci√≥n tras push en cualquier rama, excepto en los path-ignore
    branches:
      - main             # Ejecuci√≥n tras push en main, excepto en los path-ignore
      # - development      # Ejecuci√≥n tras push en developer, excepto en los path-ignore
    paths-ignore:
      - .gitignore
      - .idea/**
      - gpth*/**
      - README.md

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4) Disparador autom√°tico por cron ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  #  schedule:
  #    - cron: '0 2 * * *' # Ejecuci√≥n diaria a las 2 AM UTC
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-latest, windows-latest]  # os list
        os: [ubuntu-latest]  # os list
        python-version: [ "3.12.10" ]

    runs-on: ${{ matrix.os }}

    steps:
      # üßæ Checkout Repository
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ inputs.token_github || secrets.TOKEN_GITHUB }}

      # üêç Set up Python
      - name: üêç Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # üì¶ Install dependencies
      - name: üì¶ Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          

      # ‚ñ∂Ô∏è Execute build-binary.py with --no-compile to avoid compile any binary
      - name: ‚ñ∂Ô∏è Execute build-binary.py with --no-compile to avoid compile any binary
        shell: bash
        run: |
          echo "::group::Execute for ${{ matrix.os }}"
          python3 build-binary.py --no-compile
          echo "::endgroup::"
          

      # üè∑Ô∏è Extract TOOL_VERSION and ARCHIVE_PATH from build_info.txt
      - name: üè∑Ô∏è Extract TOOL_VERSION and ARCHIVE_PATH from build_info.txt
        shell: bash
        run: |
          # Read TOOL_VERSION from the first line
          TOOL_VERSION=$(grep '^TOOL_VERSION=' build_info.txt | cut -d'=' -f2-)

          # Read ARCHIVE_PATH from the second line
          ARCHIVE_PATH=$(grep '^ARCHIVE_PATH=' build_info.txt | cut -d'=' -f2-)

          # Save both variables on GitHub Actions environment
          echo "TOOL_VERSION=${TOOL_VERSION}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

          # Print both variables on screen
          echo "TOOL_VERSION (Linux/macOS): ${TOOL_VERSION}"
          echo "ARCHIVE_PATH (Linux/macOS)  : ${ARCHIVE_PATH}"


      # ===========================
      # Generate the Docker version
      # ===========================
      # üê≥ Log in to Docker Hub
      - name: üê≥ Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # üê≥ Build & Push Docker image
      - name: üê≥ Build & Push Docker image
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          # Define FINAL_RELEASE=false con fallback si est√° vac√≠o (por ejemplo, en eventos push)
          FINAL_RELEASE="${{ inputs.final_release }}"
          FINAL_RELEASE=${FINAL_RELEASE:-false}
      
          echo "‚Üí FINAL_RELEASE = $FINAL_RELEASE"
          
          # Fuerza a Docker a:
          #  1) descargar la base actualizada ( --pull )
          #  2) ignorar todas las capas cacheadas ( --no-cache )
          docker build --pull --no-cache \
                -t jaimetur/photomigrator:${TOOL_VERSION} \
                -f docker/dockerfile-linux .
          
          # Push siempre etiqueta obligatoria con la versi√≥n
          docker push jaimetur/photomigrator:${TOOL_VERSION}
          
          # Push 'latest' if final_release is false OR it's alpha/beta/RC
          if [[ "${FINAL_RELEASE}" == "false" || "${TOOL_VERSION}" == *alpha* || "${TOOL_VERSION}" == *beta* || "${TOOL_VERSION}" == *RC* ]]; then
            docker tag jaimetur/photomigrator:${TOOL_VERSION} jaimetur/photomigrator:latest
            docker push jaimetur/photomigrator:latest
          fi
      
          # Push 'latest-stable' only if final_release is true AND not alpha/beta/RC
          if [[ "${FINAL_RELEASE}" == "true" && "${TOOL_VERSION}" != *alpha* && "${TOOL_VERSION}" != *beta* && "${TOOL_VERSION}" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${TOOL_VERSION} jaimetur/photomigrator:latest-stable
            docker push jaimetur/photomigrator:latest-stable
          fi
          

      # üê≥ Build & Push Windows Docker image (disabled since this doesn't work as expected)
      - name: üê≥ Build & Push Windows Docker image (disabled since this doesn't work as expected)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: bash
        run: |
          # Define FINAL_RELEASE=false con fallback si est√° vac√≠o (por ejemplo, en eventos push)
          FINAL_RELEASE="${{ inputs.final_release }}"
          FINAL_RELEASE=${FINAL_RELEASE:-false}
      
          echo "‚Üí FINAL_RELEASE = $FINAL_RELEASE"
          
          # Construir imagen Windows
          docker build --pull --no-cache \
                -t jaimetur/photomigrator:${TOOL_VERSION}-windows \
                -f docker/dockerfile-windows .
          
          # Push siempre etiqueta obligatoria con la versi√≥n
          docker push jaimetur/photomigrator:${TOOL_VERSION}-windows
          
          # Push 'latest' if final_release is false OR it's alpha/beta/RC
          if [[ "${FINAL_RELEASE}" == "false" || "${TOOL_VERSION}" == *alpha* || "${TOOL_VERSION}" == *beta* || "${TOOL_VERSION}" == *RC* ]]; then
            docker tag jaimetur/photomigrator:${TOOL_VERSION}-windows jaimetur/photomigrator:latest-windows
            docker push jaimetur/photomigrator:latest-windows
          fi
      
          # Push 'latest-stable' only if final_release is true AND not alpha/beta/RC
          if [[ "${FINAL_RELEASE}" == "true" && "${TOOL_VERSION}" != *alpha* && "${TOOL_VERSION}" != *beta* && "${TOOL_VERSION}" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${TOOL_VERSION}-windows jaimetur/photomigrator:latest-stable-windows
            docker push jaimetur/photomigrator:latest-stable-windows
          fi

      # üß© Prepare ZIP docker package
      - name: üß© Prepare ZIP docker package
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          mkdir -p PhotoMigrator/docker
          mkdir -p PhotoMigrator/docker/docs
          cp docker/PhotoMigrator.sh PhotoMigrator/docker/
          cp docker/PhotoMigrator.bat PhotoMigrator/docker/
          cp docker/docker.conf PhotoMigrator/docker/
          cp Config.ini PhotoMigrator/docker/
          cp -r help PhotoMigrator/docker/
          cp README.md PhotoMigrator/docker/docs/README.md
          cp CHANGELOG.md PhotoMigrator/docker/docs/CHANGELOG.md
          cp ROADMAP.md PhotoMigrator/docker/docs/ROADMAP.md
          cp DOWNLOAD.md PhotoMigrator/docker/docs/DOWNLOAD.md
          cp CONTRIBUTING.md PhotoMigrator/docker/docs/CONTRIBUTING.md
          cp CODE_OF_CONDUCT.md PhotoMigrator/docker/docs/CODE_OF_CONDUCT.md
          cp LICENSE PhotoMigrator/docker/docs/LICENSE
          zip -r PhotoMigrator_v${{ env.TOOL_VERSION }}_docker.zip PhotoMigrator

      # üì§ Upload Docker ZIP as artifact to be used in the main workflow
      - name: üì§ Upload Docker ZIP as artifact to be used in the main workflow
        uses: actions/upload-artifact@v4
        with:
          name: PhotoMigrator_v${{ env.TOOL_VERSION }}_docker.zip
          path: PhotoMigrator_v${{ env.TOOL_VERSION }}_docker.zip

      # ================================
      # End of Docker version Generation
      # ================================

      # üè∑Ô∏è Create Release and Upload Artifact to it (only if this action have been launched manually with create_release=true)
      - name: üè∑Ô∏è Create Release and Upload Artifact to it (only if this action have been launched manually with create_release=true)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.TOOL_VERSION }}
          name: v${{ env.TOOL_VERSION }}
          draft: false
          generate_release_notes: true
          body_path: RELEASE-NOTES.md
          files: |
            PhotoMigrator_v${{ env.TOOL_VERSION }}_docker.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}