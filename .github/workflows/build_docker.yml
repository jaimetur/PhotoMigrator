name: Build Docker Image Only

on:
  workflow_call:          # Allow to call this workflow from another workflow
  workflow_dispatch:      # Allows manual execution of the workflow
    inputs:
      create_release:
        description: "Create Release ?"
        type: boolean
        required: true
        default: false
  push:                   # Ejecución tras push en cualquier rama, excepto en los path-ignore
    branches:
      - main             # Ejecución tras push en main, excepto en los path-ignore
    paths-ignore:
      - .gitignore
      - .idea/**
#      - .github/**
      - gpth*/**
      - README.md
#  schedule:
# Ejecución diaria a las 2 AM UTC
#    - cron: '0 2 * * *'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # os list
        python-version: [ "3.12.10" ]

    runs-on: ${{ matrix.os }}

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN_GITHUB }}

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          

      # 1. - Execute for ubuntu --no-compile to avoid compile any binary
      - name: 1. - Execute for ubuntu --no-compile to avoid compile any binary
        run: |
          echo "::group::Execute for ${{ matrix.os }}"
                    
          # Execute for ubuntu
          if [[ "${{ matrix.os }}" == *"ubuntu"* ]]; then
            python3 build.py --no-compile
          fi
          
          echo "::endgroup::"
        shell: bash

      # 2. Read SCRIPT_VERSION and ARCHIVE_PATH from build_info.txt
      - name: 2. Read SCRIPT_VERSION and ARCHIVE_PATH from build_info.txt
#        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Read SCRIPT_VERSION from the first line
          SCRIPT_VERSION=$(grep '^SCRIPT_VERSION=' build_info.txt | cut -d'=' -f2-)

          # Read ARCHIVE_PATH from the second line
          ARCHIVE_PATH=$(grep '^ARCHIVE_PATH=' build_info.txt | cut -d'=' -f2-)

          # Save both variables on GitHub Actions environment
          echo "SCRIPT_VERSION=${SCRIPT_VERSION}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV

          # Print both variables on screen
          echo "SCRIPT_VERSION (Linux/macOS): ${SCRIPT_VERSION}"
          echo "ARCHIVE_PATH (Linux/macOS)  : ${ARCHIVE_PATH}"


      # ===========================
      # Generate the Docker version
      # ===========================
      - name: Check Docker info
        if: ${{ matrix.os == 'windows-latest' }}
        run: docker info

      # 3. Log in to Docker Hub
      - name: 3. Log in to Docker Hub
#        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 4a. Build & Push Linux Docker image
      - name: 4a. Build & Push Docker image
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          # Fuerza a Docker a:
          #  1) descargar la base actualizada ( --pull )
          #  2) ignorar todas las capas cacheadas ( --no-cache )
          docker build --pull --no-cache \
            -t jaimetur/photomigrator:${SCRIPT_VERSION} \
            -t jaimetur/photomigrator:latest \
            -f docker/dockerfile-linux .

          # Subir etiquetas latest y con versión específica
          docker push jaimetur/photomigrator:${SCRIPT_VERSION}
          docker push jaimetur/photomigrator:latest

          # Si es versión estable (no alpha, beta ni RC), etiquetar también como latest-stable
          if [[ "${SCRIPT_VERSION}" != *alpha* && "${SCRIPT_VERSION}" != *beta* && "${SCRIPT_VERSION}" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${SCRIPT_VERSION} jaimetur/photomigrator:latest-stable
            docker push jaimetur/photomigrator:latest-stable
          fi

      # 4b. Build & Push Windows Docker image
      - name: 4b. Build & Push Windows Docker image
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          # Construir imagen Windows
          docker build --pull --no-cache \
            -t jaimetur/photomigrator:${SCRIPT_VERSION}-windows \
            -t jaimetur/photomigrator:latest-windows \
            -f docker/dockerfile-windows .

          # Subir etiquetas latest y con versión específica
          docker push jaimetur/photomigrator:${SCRIPT_VERSION}-windows
          docker push jaimetur/photomigrator:latest-windows

          # Si es versión estable (no alpha, beta ni RC), subir también como latest-stable-windows
          if [[ "${SCRIPT_VERSION}" != *alpha* && "${SCRIPT_VERSION}" != *beta* && "${SCRIPT_VERSION}" != *RC* ]]; then
            docker tag jaimetur/photomigrator:${SCRIPT_VERSION}-windows jaimetur/photomigrator:latest-stable-windows
            docker push jaimetur/photomigrator:latest-stable-windows
          fi

      
      # 5. Prepare unified ZIP docker package
      - name: 5. Prepare unified ZIP docker package
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          mkdir -p PhotoMigrator/docker
          cp docker/PhotoMigrator.sh PhotoMigrator/docker/
          cp docker/PhotoMigrator.bat PhotoMigrator/docker/
          cp docker/docker.conf PhotoMigrator/docker/
          cp Config.ini PhotoMigrator/docker/
          cp -r docs PhotoMigrator/docker/
          cp -r help PhotoMigrator/docker/
          cp README.md PhotoMigrator/docker/docs/README.md
          zip -r PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip PhotoMigrator
      # ================================
      # End of Docker version Generation
      # ================================

      # 6. Create Release and Upload Artifact to it (only if this action have been launched manually with create_release=true)
      - name: 6. Create Release and Upload Artifact to it (only if this action have been launched manually with create_release=true)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.SCRIPT_VERSION }}
          name: v${{ env.SCRIPT_VERSION }}
          draft: false
          generate_release_notes: true
          body_path: CURRENT-RELEASE.md
          files: |
            PhotoMigrator_v${{ env.SCRIPT_VERSION }}_docker.zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

      # 7. - Cleanup (Linux/macOS)
      - name: 7. - Cleanup (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -f artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de carpeta raiz."
          elif [ -f src/artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de src."
          fi
        shell: bash


#      # 8. Commit y push README.md (Solo si OS = ubuntu*)
#      - name: 8. Commit y push README.md
#        if: ${{ startsWith(matrix.os, 'ubuntu') }}
#        run: |
#          git config --global user.name "github-actions[bot]"
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#
#          # Añadir solo README.md, evitando archivos no deseados
#          git add README.md
#
#          # Si NO hay cambios en README.md, salir sin error
#          if git diff --cached --quiet; then
#            echo "No hay cambios en README.md"
#            exit 0
#          fi
#
#          # Guardar cambios en stash antes de pull --rebase
#          git stash push -m "Pre-rebase stash"
#
#          # Actualizar la rama
#          git pull --rebase origin ${{ github.ref_name }}
#
#          # Restaurar cambios del stash si existen
#          git stash pop || echo "No hay stash para aplicar"
#
#          # Asegurar que README.md está agregado después del pop
#          git add README.md
#
#          # Verificar nuevamente si hay cambios antes de hacer commit
#          if git diff --cached --quiet; then
#            echo "No hay cambios después del stash pop"
#            exit 0
#          fi
#
#          # Realizar commit y push
#          git commit -m "README.md updated by Github Actions (build_docker.yml)"
#          git push origin ${{ github.ref_name }}