name: Build Executables for Multiple Platforms

on:
  push:
    branches:
      - main
    paths-ignore:
      - '_built_versions/**'  # Ignore any changes in _built_versions
  workflow_dispatch:  # Allows manual execution of the workflow

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-20.04, macos-latest, windows-latest]  # os list
#        os: [ubuntu-20.04]  # os list
#        os: [macos-latest]  # os list
        os: [windows-latest]  # os list
#        os: [ubuntu-20.04, windows-latest]  # os list
#        os: [macos-latest, windows-latest]  # os list
#        os: [ubuntu-20.04, macos-latest]  # os list
        arch: [x86_64, arm64]  # arch list
#        arch: [x86_64]  # arch list
#        arch: [arm64]  # arch list
        exclude:
          - os: windows-latest
            arch: arm64  # Windows is only compiled for x86 (32/64-bit)
        python-version: ["3.10.10"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Show Matrix Info
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Architecture: ${{ matrix.arch }}"
        shell: bash

#      - name: Set up QEMU for ARM64 (Ubuntu)
#        if: matrix.os == 'ubuntu-20.04' && matrix.arch == 'arm64'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y qemu qemu-user-static
#          sudo update-binfmts --enable qemu-aarch64
#          ls /usr/bin | grep qemu
#          /usr/bin/qemu-aarch64-static --version

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Compile for Linux (arm64) with Docker and QEMU
      - name: Compile for Linux (arm64) with Docker and QEMU
        if: matrix.os == 'ubuntu-20.04' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static
          sudo update-binfmts --enable qemu-aarch64
          ls /usr/bin | grep qemu
          /usr/bin/qemu-aarch64-static --version
          docker run --rm --platform linux/arm64 -v ${{ github.workspace }}:/workspace -w /workspace/src python:3.10 bash -c "
                apt update && apt install -y gcc-aarch64-linux-gnu &&
                python3 _compile.py"
        shell: bash

      # Compile for Linux (amd64)
      - name: Compile for Linux (amd64)
        if: matrix.os == 'ubuntu-20.04' && matrix.arch != 'arm64'
        run: |
          cd src
          python3 _compile.py
        shell: bash

      # Compile for macOS with different architectures
      - name: Compile for MacOS (all architectures)
        if: matrix.os == 'macos-latest'
        run: |
          cd src
          arch -${{ matrix.arch }} python3 _compile.py
        shell: bash

      # Compile for Windows (and64)
      - name: Compile for Windows (amd64)
        if: matrix.os == 'windows-latest'
        run: |
          cd src
          python _compile.py
        shell: cmd

      - name: Extract ARCHIVE_FINAL_PATH_NAME from filename.txt (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          ARCHIVE_PATH=$(cat src/filename.txt)
          echo "ARCHIVE_FINAL_PATH_NAME=${ARCHIVE_PATH}" >> $GITHUB_ENV
          echo "ARCHIVE_FINAL_PATH_NAME (Linux/macOS): ${ARCHIVE_PATH}"

      - name: Extract ARCHIVE_FINAL_PATH_NAME from filename.txt (Windows)
        if: runner.os == 'Windows'
        run: |
          $path = Get-Content src/filename.txt | Select-String -Pattern "."
          echo "ARCHIVE_FINAL_PATH_NAME=$path" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "ARCHIVE_FINAL_PATH_NAME (Windows): $path"

      # Upload the compiled compressed file to the corresponding GitHub repositories
      - name: Upload artifact to GitHub repos with CLI (Cross-Platform)
#        if: runner.os != 'Windows'
        if: runner.os == 'flksjflkajlfñkajlñfkasfñafsadfa'
        run: |
          echo "Uploading file '${{ env.ARCHIVE_FINAL_PATH_NAME }}' to dev and prod repositories..."

          # Configuración inicial de Git
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          # Definir parámetros
          COMMIT_MESSAGE="Added from GitHub Actions"
          REPOS=("OrganizeTakeoutPhotos-dev" "OrganizeTakeoutPhotos")
          FILE=${{ env.ARCHIVE_FINAL_PATH_NAME }}

          # Iterar sobre cada repositorio
          for REPO in "${REPOS[@]}"; do
            echo "Uploading to $REPO..."

            # URL del repositorio
            REPO_URL="https://${{ secrets.GH_PAT }}@github.com/jaimetur/$REPO.git"

            # Añadir el archivo al índice
            git init
            git remote add origin $REPO_URL
            git checkout -b ${{ github.ref_name }}

            # Añadir archivo y hacer commit
            git add $FILE
            git commit -m "$COMMIT_MESSAGE"

            # Subir el archivo (sin hacer pull previo)
            git push origin ${{ github.ref_name }}

            # Limpiar repositorio temporal
            rm -r -fo .git
          done

      # Upload the compiled compressed file to the corresponding GitHub repositories
      - name: Upload artifact to GitHub repos with API (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Uploading file '${{ env.ARCHIVE_FINAL_PATH_NAME }}' to dev and prod repositories..."

          # Encode Artifact to Base64 (Linux/macOS)
          cat ${{ env.ARCHIVE_FINAL_PATH_NAME }} | base64 | tr -d '\n' > artifact_base64.txt

          # Leer el contenido codificado en base64 desde el archivo
          BASE64_ARTIFACT=$(cat artifact_base64.txt)

          # Parameters
          COMMIT_MESSAGE="Added from GitHub Actions"
          REPOS=("OrganizeTakeoutPhotos-dev" "OrganizeTakeoutPhotos")

          for REPO in "${REPOS[@]}"; do
            echo "Uploading to $REPO..."
            URL=https://api.github.com/repos/jaimetur/$REPO/contents/${{ env.ARCHIVE_FINAL_PATH_NAME }}

            # Extraer SHA si el archivo existe
            command="curl -s -f -H 'Authorization: token ${{ secrets.GH_PAT }}' '${URL}' | grep '\"sha\"' | awk -F '\"' '{print \$4}' || echo \"\""
            # echo "Command: ${command}"
            SHA=$(eval ${command})
            echo "SHA: ${SHA}"
            
            # Crear archivo temporal para el payload
            PAYLOAD_FILE=$(mktemp)
            
            # Generar el contenido del JSON y guardarlo en el archivo temporal
            echo "{
              \"message\": \"${COMMIT_MESSAGE}\",
              \"content\": \"${BASE64_ARTIFACT}\",
              \"branch\": \"main\",
              \"sha\": \"${SHA}\"
            }" > ${PAYLOAD_FILE}
                        
            # Subir el archivo (crear o sobrescribir)
            curl -X PUT \
                -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -H "Content-Type: application/json" \
                -d @${PAYLOAD_FILE} \
                ${URL}
            
            # Limpiar el archivo temporal
            rm ${PAYLOAD_FILE}
            
          done
        shell: bash

      - name: Upload artifact to GitHub repos with API (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "Uploading file '${{ env.ARCHIVE_FINAL_PATH_NAME }}' to dev and prod repositories..."

          # Encode Artifact to Base64 (Windows)
          [Convert]::ToBase64String([IO.File]::ReadAllBytes("${{ env.ARCHIVE_FINAL_PATH_NAME }}")) | Out-File -FilePath artifact_base64.txt
          
          # Leer el contenido codificado en base64 (for Windows)
          $BASE64_ARTIFACT = Get-Content -Path "artifact_base64.txt" -Raw

          # Parameters
          $COMMIT_MESSAGE = "Added from GitHub Actions"

          # UPLOAD TO DEV REPO:
          URL=https://api.github.com/repos/jaimetur/OrganizeTakeoutPhotos-dev/contents/${{ env.ARCHIVE_FINAL_PATH_NAME }}
          # Get the sha of the file in dev
          SHA = (Invoke-RestMethod -Uri "${URL}" -Headers @{Authorization="token ${{ secrets.GH_PAT }}"}).sha
          Invoke-RestMethod -Method Put -Uri "${URL}" -Headers @{Authorization="token ${{ secrets.GH_PAT }}"} -Body (ConvertTo-Json -Compress @{
            message = $COMMIT_MESSAGE
            content = $BASE64_ARTIFACT
            branch = "main"
            sha = SHA
          })

          # UPLOAD TO PROD REPO:
          URL=https://api.github.com/repos/jaimetur/OrganizeTakeoutPhotos/contents/${{ env.ARCHIVE_FINAL_PATH_NAME }}
          # Get the sha of the file in dev
          SHA = (Invoke-RestMethod -Uri "${URL}" -Headers @{Authorization="token ${{ secrets.GH_PAT }}"}).sha
          Invoke-RestMethod -Method Put -Uri "${URL}" -Headers @{Authorization="token ${{ secrets.GH_PAT }}"} -Body (ConvertTo-Json -Compress @{
            message = $COMMIT_MESSAGE
            content = $BASE64_ARTIFACT
            branch = "main"
            sha = SHA
          })
        shell: pwsh

      - name: List Files (1)
        run: |
          ls -l
          ls -l _built_versions/OrganizeTakeoutPhotos_v2.3.0
          ls -l src
        shell: bash

      - name: Cleanup (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -f artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de carpeta raiz."
          elif [ -f src/artifact_base64.txt ]; then
            rm artifact_base64.txt
            echo "Archivo artifact_base64.txt eliminado de src."
          fi
          if [ -f ${{ env.ARCHIVE_FINAL_PATH_NAME }} ]; then
            rm ${{ env.ARCHIVE_FINAL_PATH_NAME }}
            echo "Archivo '${{ env.ARCHIVE_FINAL_PATH_NAME }}' eliminado de carpeta raiz."
          elif [ -f src/${{ env.ARCHIVE_FINAL_PATH_NAME }} ]; then
            rm ${{ env.ARCHIVE_FINAL_PATH_NAME }}
            echo "Archivo '${{ env.ARCHIVE_FINAL_PATH_NAME }}' eliminado de carpeta raiz."
          fi
        shell: bash

      - name: Cleanup Base64 File (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "artifact_base64.txt") {
            Remove-Item -Path "artifact_base64.txt"
            Write-Host "Archivo artifact_base64.txt eliminado de carpeta raiz."
          } 
          elsif (Test-Path "src\artifact_base64.txt") {
            Remove-Item -Path "src\artifact_base64.txt"
            Write-Host "Archivo artifact_base64.txt eliminado de carpeta src\."
          }
          if (Test-Path "${{ env.ARCHIVE_FINAL_PATH_NAME }}") {
            Remove-Item -Path "${{ env.ARCHIVE_FINAL_PATH_NAME }}"
            Write-Host "Archivo '${{ env.ARCHIVE_FINAL_PATH_NAME }}' eliminado de carpeta raiz."
          } 
          elsif (Test-Path "src\${{ env.ARCHIVE_FINAL_PATH_NAME }}") {
            Remove-Item -Path "src\${{ env.ARCHIVE_FINAL_PATH_NAME }}"
            Write-Host "Archivo '${{ env.ARCHIVE_FINAL_PATH_NAME }}' eliminado de carpeta src\."
          }
        shell: pwsh

      - name: List Files (2)
        run: |
          ls -l
          ls -l _built_versions/OrganizeTakeoutPhotos_v2.3.0
          ls -l src
        shell: bash


#      # Upload the compiled compressed file to the Actions task
#      - name: Archive Artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.ARCHIVE_NAME }}
#          path: ${{ env.ARCHIVE_FINAL_PATH }}