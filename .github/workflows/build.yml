name: Build Executables for Multiple Platforms

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite ejecución manual del workflow

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-20.04, macos-latest, windows-latest]  # macos-latest
        os: [ubuntu-20.04]  # macos-latest
#        arch: [x86_64, arm64]  # amd64 y arm64
        arch: [x86_64]  # amd64 y arm64
        exclude:
          - os: windows-latest
            arch: arm64  # Windows solo se compila para x86 (32/64-bit)
        python-version: ["3.10.10"]

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          
#      - name: Install dependencies (Linux/MacOS)
#        if: matrix.os != 'windows-latest'
#        run: |
#          python3 -m pip install --upgrade pip
#           pip3 install cibuildwheel
#           if [ -f src/requirements.txt ]; then pip install -r src/requirements.txt; fi
#        shell: bash
#
#      - name: Install dependencies (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#         python3 -m pip install --upgrade pip
#         pip3 install cibuildwheel
#         if exist src\requirements.txt ( pip install -r src\requirements.txt )
#        shell: cmd


      # Extraer SCRIPT_NAME y SCRIPT_VERSION
      - name: Extract Script Metadata
        run: |
          SCRIPT_NAME=$(grep -oP '(?<=SCRIPT_NAME\s*=\s*")[^"]+' src/OrganizeTakeoutPhotos.py)
          SCRIPT_VERSION=$(grep -oP '(?<=SCRIPT_VERSION\s*=\s*")[^"]+' src/OrganizeTakeoutPhotos.py)

          echo "SCRIPT_NAME=$SCRIPT_NAME" >> $GITHUB_ENV
          echo "SCRIPT_VERSION=$SCRIPT_VERSION" >> $GITHUB_ENV

          echo "Script Name: $SCRIPT_NAME"
          echo "Script Version: $SCRIPT_VERSION"
        shell: bash

      # Construcción del nombre del artefacto y path (Linux/Mac)
      - name: Build Archive Path (Linux/Mac)
        if: matrix.os != 'windows-latest'
        run: |
          ARCHIVE_PATH="../_built_versions/${{ env.SCRIPT_NAME }}_${{ env.SCRIPT_VERSION }}/"
          ARCHIVE_NAME="${{ env.SCRIPT_NAME }}_${{ env.SCRIPT_VERSION }}_${{ matrix.os }}_${{ matrix.arch }}.zip"
          FULL_ARCHIVE_PATH="${ARCHIVE_PATH}${ARCHIVE_NAME}"
          echo "ARCHIVE_PATH=$FULL_ARCHIVE_PATH" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "Archivo comprimido: $FULL_ARCHIVE_PATH"
        shell: bash

      # Construcción del nombre del artefacto y path (Windows)
      - name: Build Archive Path (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          SET ARCHIVE_PATH=..\_built_versions\%SCRIPT_NAME%_%SCRIPT_VERSION%\
          SET ARCHIVE_NAME=%SCRIPT_NAME%_%SCRIPT_VERSION%_windows_%ARCH%.zip
          SET FULL_ARCHIVE_PATH=%ARCHIVE_PATH%%ARCHIVE_NAME%
          echo ARCHIVE_PATH=%FULL_ARCHIVE_PATH% >> %GITHUB_ENV%
          echo ARCHIVE_NAME=%ARCHIVE_NAME% >> %GITHUB_ENV%
          echo Archivo comprimido: %FULL_ARCHIVE_PATH%
        shell: cmd

      # Compilación para Linux y macOS
      - name: Compile for Linux and MacOS
        if: matrix.os != 'windows-latest'
        run: |
          cd src
          python3 _compile.py
        shell: bash

      # Compilación para Windows
      - name: Compile for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd src
          python _compile.py
        shell: cmd

      - name: Debug Artifact Path
        run: |
          ls -l _built_versions/
          echo "Archivo a subir: ${{ env.ARCHIVE_PATH }}"
        shell: bash

      # Subir los ejecutables generados usando la ruta completa
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_DIR }}/${{ env.ARCHIVE_NAME }}

