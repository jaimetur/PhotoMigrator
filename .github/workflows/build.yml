name: Build Executables for Multiple Platforms

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite ejecución manual del workflow

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-20.04, macos-latest, windows-latest]  # macos-latest
        os: [ubuntu-20.04]  # macos-latest
#        arch: [x86_64, arm64]  # amd64 y arm64
        arch: [x86_64]  # amd64 y arm64
        exclude:
          - os: windows-latest
            arch: arm64  # Windows solo se compila para x86 (32/64-bit)
        python-version: ["3.10.10"]

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          
#      - name: Install dependencies (Linux/MacOS)
#        if: matrix.os != 'windows-latest'
#        run: |
#          python3 -m pip install --upgrade pip
#           pip3 install cibuildwheel
#           if [ -f src/requirements.txt ]; then pip install -r src/requirements.txt; fi
#        shell: bash
#
#      - name: Install dependencies (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#         python3 -m pip install --upgrade pip
#         pip3 install cibuildwheel
#         if exist src\requirements.txt ( pip install -r src\requirements.txt )
#        shell: cmd


      - name: Extract Metadata and Build Archive Path (Linux/Mac)
        if: runner.os != 'Windows'
        run: |
          # Extraer nombre del script y versión usando awk para mayor precisión
          SCRIPT_NAME=$(awk -F '"' '/SCRIPT_NAME/ {print $2}' src/OrganizeTakeoutPhotos.py)
          SCRIPT_VERSION=$(awk -F '"' '/SCRIPT_VERSION/ {print $2}' src/OrganizeTakeoutPhotos.py)
      
          # Validar si las variables se extrajeron correctamente
          if [ -z "$SCRIPT_NAME" ] || [ -z "$SCRIPT_VERSION" ]; then
            echo "Error: No se pudo extraer SCRIPT_NAME o SCRIPT_VERSION"
            exit 1
          fi
          SCRIPT_NAME_VERSION="${SCRIPT_NAME}_${SCRIPT_VERSION}"
          ARCHIVE_PATH="../_built_versions/${SCRIPT_NAME_VERSION}/"
          ARCHIVE_NAME="${SCRIPT_NAME_VERSION}_${{ matrix.os }}_${{ matrix.arch }}.zip"
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "Archivo comprimido: ${ARCHIVE_PATH}${ARCHIVE_NAME}"
        shell: bash

      - name: Extract Metadata and Build Archive Path (Windows)
        if: runner.os == 'Windows'
        run: |
          FOR /F "tokens=2 delims== " %%A IN ('findstr /C:"SCRIPT_NAME" src\OrganizeTakeoutPhotos.py') DO @SET SCRIPT_NAME=%%A
          FOR /F "tokens=2 delims== " %%A IN ('findstr /C:"SCRIPT_VERSION" src\OrganizeTakeoutPhotos.py') DO @SET SCRIPT_VERSION=%%A
          REM Eliminar comillas del principio y final
          SET SCRIPT_NAME=%SCRIPT_NAME:~1,-1%
          SET SCRIPT_VERSION=%SCRIPT_VERSION:~1,-1%
          REM Crear SCRIPT_NAME_VERSION
          SET SCRIPT_NAME_VERSION=%SCRIPT_NAME%_%SCRIPT_VERSION%
          REM Construir paths
          SET ARCHIVE_PATH=..\_built_versions\%SCRIPT_NAME_VERSION%\
          SET ARCHIVE_NAME=%SCRIPT_NAME_VERSION%_windows_${{ matrix.arch }}.zip
          REM Guardar en GITHUB_ENV
          echo ARCHIVE_PATH=%ARCHIVE_PATH% >> %GITHUB_ENV%
          echo ARCHIVE_NAME=%ARCHIVE_NAME% >> %GITHUB_ENV%
          echo Script Name: %SCRIPT_NAME%
          echo Script Version: %SCRIPT_VERSION%
          echo Archivo comprimido: %ARCHIVE_PATH%%ARCHIVE_NAME%
        shell: cmd


      # Compilación para Linux y macOS
      - name: Compile for Linux and MacOS
        if: matrix.os != 'windows-latest'
        run: |
          cd src
          python3 _compile.py
        shell: bash

      # Compilación para Windows
      - name: Compile for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd src
          python _compile.py
        shell: cmd

      - name: Debug Artifact Path
        run: |
          ls -l _built_versions/
          echo "Archivo a subir: ${{ env.ARCHIVE_PATH }}"
        shell: bash

      # Subir los ejecutables generados usando la ruta completa
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_PATH }}/${{ env.ARCHIVE_NAME }}

