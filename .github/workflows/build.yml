name: Build Executables for Multiple Platforms

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite ejecución manual del workflow

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-20.04, macos-latest, windows-latest]  # macos-latest
        os: [ubuntu-20.04]  # macos-latest
#        arch: [x86_64, arm64]  # amd64 y arm64
        arch: [x86_64]  # amd64 y arm64
        exclude:
          - os: windows-latest
            arch: arm64  # Windows solo se compila para x86 (32/64-bit)
        python-version: ["3.10.10"]

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          
#      - name: Install dependencies (Linux/MacOS)
#        if: matrix.os != 'windows-latest'
#        run: |
#          python3 -m pip install --upgrade pip
#           pip3 install cibuildwheel
#           if [ -f src/requirements.txt ]; then pip install -r src/requirements.txt; fi
#        shell: bash
#
#      - name: Install dependencies (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#         python3 -m pip install --upgrade pip
#         pip3 install cibuildwheel
#         if exist src\requirements.txt ( pip install -r src\requirements.txt )
#        shell: cmd


      # Compilación para Linux y macOS
      - name: Compile for Linux and MacOS
        if: matrix.os != 'windows-latest'
        run: |
          cd src
          python3 _compile.py
        shell: bash

      # Compilación para Windows
      - name: Compile for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd src
          python _compile.py
        shell: cmd

      # Extraer metadatos y construir paths
      - name: Extract Metadata and Create Path Variables
        run: |
          SCRIPT_NAME=$(grep -oP 'SCRIPT_NAME\s*=\s*"\K[^"]+' src/OrganizeTakeoutPhotos.py)
          SCRIPT_VERSION=$(grep -oP 'SCRIPT_VERSION\s*=\s*"\K[^"]+' src/OrganizeTakeoutPhotos.py)
          SCRIPT_NAME_VERSION="${SCRIPT_NAME}_${SCRIPT_VERSION}"

          ARCH="${{ matrix.arch }}"
          OS_TAG="linux"  # Valor por defecto

          # Determinar etiqueta según el sistema operativo
          if [[ "${{ matrix.os }}" == *"windows"* ]]; then
            OS_TAG="windows"
          elif [[ "${{ matrix.os }}" == *"macos"* ]]; then
            OS_TAG="macos"
          fi

          # Reemplazar x86_64 por amd64
          if [ "$ARCH" == "x86_64" ]; then
            ARCH="amd64"
          fi

          # Crear el nombre del artefacto con la etiqueta dinámica
          ARCHIVE_NAME="${SCRIPT_NAME_VERSION}_${OS_TAG}_${ARCH}.zip"
          
          # Determinar la ruta del archivo generado
          if [ -d "_built_versions/${SCRIPT_NAME_VERSION}" ]; then
            ARCHIVE_PATH=$(realpath "_built_versions/${SCRIPT_NAME_VERSION}/")
          else
            ARCHIVE_PATH=$(pwd)/_built_versions/${SCRIPT_NAME_VERSION}
          fi
          ARCHIVE_PATH_NAME="${ARCHIVE_PATH}/${ARCHIVE_NAME}"
          ARCHIVE_FINAL_PATH="_built_versions/${SCRIPT_NAME_VERSION}/"
          ARCHIVE_FINAL_PATH_NAME="${ARCHIVE_FINAL_PATH}${ARCHIVE_NAME}"
          
          # Guardar variables en el entorno
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}"
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}"
          echo "ARCHIVE_PATH_NAME=${ARCHIVE_PATH_NAME}"
          echo "ARCHIVE_FINAL_PATH=${ARCHIVE_FINAL_PATH}"
          echo "ARCHIVE_FINAL_PATH_NAME=${ARCHIVE_FINAL_PATH_NAME}"
          
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH_NAME=${ARCHIVE_PATH_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_FINAL_PATH=${ARCHIVE_FINAL_PATH}" >> $GITHUB_ENV
          echo "ARCHIVE_FINAL_PATH_NAME=${ARCHIVE_FINAL_PATH_NAME}" >> $GITHUB_ENV

          # Para Windows, convertir rutas
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "ARCHIVE_PATH_NAME=$(echo ${ARCHIVE_PATH_NAME} | sed 's/\//\\/g')" >> $GITHUB_ENV
          fi
        shell: bash

#      - name: Move Artifact to Workspace
#        run: |
#          echo "Archivo a original a subir: ${{ env.ARCHIVE_PATH_NAME }}"
#          echo "Archivo final subido      : ${{ env.ARCHIVE_FINAL_PATH_NAME }}"
#          mkdir -p ${{ env.ARCHIVE_FINAL_PATH }}
#          mv ${{ env.ARCHIVE_PATH_NAME }} ${{ env.ARCHIVE_FINAL_PATH_NAME }}
#        shell: bash

      # Subir los ejecutables generados usando la ruta completa
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_FINAL_PATH }}
      - name: Commit and push artifact to repo
        run: |
          echo "Archivo a original a subir: ${{ env.ARCHIVE_PATH_NAME }}"
          echo "Archivo final subido      : ${{ env.ARCHIVE_FINAL_PATH_NAME }}"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Añadir los archivos al índice
          git add ${{ env.ARCHIVE_FINAL_PATH }}
          
          # Comprobar si hay cambios para evitar errores
          git diff --cached --quiet || git commit -m "Add artifact from GitHub Actions"
          
          # Push usando el token
          git push https://${{ secrets.GH_PAT_CLASSIC }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref_name }}
          git push https://${{ secrets.GH_PAT_CLASSIC }}@github.com/jaimetur/OrganizeTakeoutPhotos.git HEAD:${{ github.ref_name }}