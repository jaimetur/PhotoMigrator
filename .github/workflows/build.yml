name: Build Executables for Multiple Platforms

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite ejecución manual del workflow

jobs:
  build:
    strategy:
      matrix:
#        os: [ubuntu-20.04, macos-latest, windows-latest]  # macos-latest
        os: [ubuntu-20.04]  # macos-latest
#        arch: [x86_64, arm64]  # amd64 y arm64
        arch: [x86_64]  # amd64 y arm64
        exclude:
          - os: windows-latest
            arch: arm64  # Windows solo se compila para x86 (32/64-bit)
        python-version: ["3.10.10"]

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          
#      - name: Install dependencies (Linux/MacOS)
#        if: matrix.os != 'windows-latest'
#        run: |
#          python3 -m pip install --upgrade pip
#           pip3 install cibuildwheel
#           if [ -f src/requirements.txt ]; then pip install -r src/requirements.txt; fi
#        shell: bash
#
#      - name: Install dependencies (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#         python3 -m pip install --upgrade pip
#         pip3 install cibuildwheel
#         if exist src\requirements.txt ( pip install -r src\requirements.txt )
#        shell: cmd


      # Compilación para Linux y macOS
      - name: Compile for Linux and MacOS
        if: matrix.os != 'windows-latest'
        run: |
          cd src
          python3 _compile.py
        shell: bash

      # Compilación para Windows
      - name: Compile for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd src
          python _compile.py
        shell: cmd

      # Extraer metadatos y construir paths
      - name: Extract Metadata and Create Path Variables
        run: |
          SCRIPT_NAME=$(grep -oP 'SCRIPT_NAME\s*=\s*"\K[^"]+' src/OrganizeTakeoutPhotos.py)
          SCRIPT_VERSION=$(grep -oP 'SCRIPT_VERSION\s*=\s*"\K[^"]+' src/OrganizeTakeoutPhotos.py)
          SCRIPT_NAME_VERSION="${SCRIPT_NAME}_${SCRIPT_VERSION}"
          ARCHIVE_NAME="${SCRIPT_NAME_VERSION}_${{ matrix.os }}_${{ matrix.arch }}.zip"
          
          # Ruta absoluta usando realpath
          ARCHIVE_DIR=$(realpath "_built_versions/${SCRIPT_NAME_VERSION}/")
          ARCHIVE_PATH="${ARCHIVE_DIR}/${ARCHIVE_NAME}"
          
          # Guardar variables en entorno
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV
          
          # Convertir rutas para Windows
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "ARCHIVE_PATH=$(echo ${ARCHIVE_PATH} | sed 's/\//\\/g')" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Debug Artifact Path
        run: |
          ls -l _built_versions/
          echo "Archivo a subir: ${{ env.ARCHIVE_PATH }}${{ env.ARCHIVE_NAME }}"
        shell: bash

      # Subir los ejecutables generados usando la ruta completa
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_PATH }}


